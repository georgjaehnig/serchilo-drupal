<?php
/**
 * @file
 * Code for the Serchilo feature.
 */

include_once 'serchilo.features.inc';


/**
 * Implements hook_node_presave().
 */
function serchilo_node_presave($node) {

  if ($node->type == 'shortcut') {
    // derive and set url metadata
    $url = drupal_array_get_nested_value($node->field_url, array(LANGUAGE_NONE, 0, 'value'));
    $argument_names = _serchilo_get_argument_names($url);
    drupal_array_set_nested_value($node->field_argument_names, array(LANGUAGE_NONE, 0, 'value'), join(', ', $argument_names));
    drupal_array_set_nested_value($node->field_argument_count, array(LANGUAGE_NONE, 0, 'value'), count($argument_names));

    // revoke moderation flag
    // if non-sensible edit
    $is_sensible_edit = _serchilo_is_sensible_edit($node);
    if (!$is_sensible_edit) {
      $node->revision_operation = REVISIONING_NEW_REVISION_NO_MODERATION;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function serchilo_node_insert($node) {
  if ($node->type == 'shortcut') {
    if (!$node->revision_moderation) {
      _serchilo_insert_shortcut_row($node);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function serchilo_node_update($node) {
  if ($node->type == 'shortcut') {
    if (!$node->revision_moderation) {
      _serchilo_insert_or_update_shortcut_row($node);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function serchilo_node_delete($node) {
  if ($node->type == 'shortcut') {
    _serchilo_delete_shortcut_row($node);
  }
}

/**
 * Implements hook_revision_publish().
 */
function serchilo_revision_publish($node) {
  if ($node->type == 'shortcut') {
    _serchilo_insert_or_update_shortcut_row($node);
  }
}

function serchilo_form_shortcut_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_keyword'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
}


function serchilo_form_validate_no_tags($element, &$form_state) {

  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != preg_replace('/<.*>/', '', $value)) {
    form_set_error(join('][', $element['#parents']), t('No HTML tags are allowed.'));
  }
}

/**
 * Implements hook_node_validate().
 */
function serchilo_node_validate($node, $form, &$form_state) {
return;
  if ($node->type == 'shortcut') {
    // dpm($argument_names);
    // dpm($node);
    // TODO:
    // check for collisions
  }
}

/**
 * Retrieve database fields from shortcut node.
 *
 * @param $node
 *   Node of type shortcut
 * @return
 *   array to pass to fields()
 */
function _serchilo_shortcut_to_db_fields($node) {

  $fields = array(
    'nid' => $node->nid,
    'title' => $node->title,
    'keyword' =>        drupal_array_get_nested_value($node->field_keyword,        array(LANGUAGE_NONE, 0, 'value')),
    'argument_names' => drupal_array_get_nested_value($node->field_argument_names, array(LANGUAGE_NONE, 0, 'value')),
    'argument_count' => drupal_array_get_nested_value($node->field_argument_count, array(LANGUAGE_NONE, 0, 'value')),
    'url' =>            drupal_array_get_nested_value($node->field_url,            array(LANGUAGE_NONE, 0, 'value')),
    'input_encoding' => drupal_array_get_nested_value($node->field_input_encoding, array(LANGUAGE_NONE, 0, 'value')),
    'weight' =>         drupal_array_get_nested_value($node->field_weight,         array(LANGUAGE_NONE, 0, 'value')),
    'invisible' =>      drupal_array_get_nested_value($node->field_invisible,      array(LANGUAGE_NONE, 0, 'value')),
    'set_referrer' =>   drupal_array_get_nested_value($node->field_set_referrer,   array(LANGUAGE_NONE, 0, 'value')),
    'namespace_id' =>   drupal_array_get_nested_value($node->field_namespace,      array(LANGUAGE_NONE, 0, 'tid'  )),
    'namespace_name' => drupal_array_get_nested_value($node->field_namespace,      array(LANGUAGE_NONE, 0, 'name' )),
  );

  return $fields;
}


function _serchilo_insert_or_update_shortcut_row($node) {
  $row_count = db_select('serchilo_shortcut') 
    ->fields('serchilo_shortcut')
    ->condition('nid', $node->nid )
    ->execute()
    ->rowCount() 
    ;
  if ($row_count == 0) {
    _serchilo_insert_shortcut_row($node); 
  }
  else {
    _serchilo_update_shortcut_row($node); 
  }
}

function _serchilo_insert_shortcut_row($node) {
  $fields = _serchilo_shortcut_to_db_fields($node);
  $result = db_insert('serchilo_shortcut') 
    ->fields($fields)
    ->execute();
  //dpm($result);
  return;
}

function _serchilo_update_shortcut_row($node) {
  $fields = _serchilo_shortcut_to_db_fields($node);
  $num_updated = db_update('serchilo_shortcut') 
    ->fields($fields)
    ->condition('nid', $node->nid )
    ->execute();
  // TODO
  // raise error when $num_updated != 1
  //dpm($num_updated);
  return $num_updated;
}

function _serchilo_delete_shortcut_row($node) {
  $num_deleted = db_delete('serchilo_shortcut') 
    ->condition('nid', $node->nid )
    ->execute();
  // TODO
  // raise error when $num_deleted != 1
  dpm($num_deleted);
}

function _serchilo_get_argument_names($url) {

  // parse url for arguments
  preg_match_all(
    // ? makes ungreedy
    '/\{s:(.+?)\}/',
    $url,
    $matches,
    PREG_PATTERN_ORDER
  );
  $argument_names = $matches[1];

  // treat arguments with same name as only one argument
  $argument_names = array_unique($argument_names);

  // make sure indexes have no gaps
  $argument_names = array_values($argument_names);

  return $argument_names;
}

/**
 * Check if shortcut edit is sensible edit.
 *
 * @param $node
 *   Node of type shortcut.
 * @return 
 *   TRUE if edit is sensible.
 */
function _serchilo_is_sensible_edit($node)
{
  $is_sensible_edit = NULL;
  // TODO:
  // better use node_type_get_type() ?
  if ($node->type == 'shortcut') {
    if (empty($node->is_new)) {
      $is_sensible_edit = (
        (
          // change in keyword
          drupal_array_get_nested_value($node->original->field_keyword, array(LANGUAGE_NONE, 0, 'value')) 
          != drupal_array_get_nested_value($node->field_keyword, array(LANGUAGE_NONE, 0, 'value'))
        ) 
        ||
        (
          // change in url
          drupal_array_get_nested_value($node->original->field_url, array(LANGUAGE_NONE, 0, 'value')) 
          != drupal_array_get_nested_value($node->field_url, array(LANGUAGE_NONE, 0, 'value'))
        ) 
        ||
        (
          // change in namespace
          drupal_array_get_nested_value($node->original->field_namespace, array(LANGUAGE_NONE, 0, 'tid')) 
          != drupal_array_get_nested_value($node->field_namespace, array(LANGUAGE_NONE, 0, 'tid'))
        ) 
      );
    }
    else {
      // every new shortcut is sensible
      $is_sensible_edit = TRUE;
    }
  }
  return $is_sensible_edit;
}

