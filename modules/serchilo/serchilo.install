<?PHP

/**
 * Implements hook_install().
 */
function serchilo_install(){

  module_load_include('module', 'taxonomy', 'taxonomy');

  serchilo_set_spamicide(); 

  $import_file = drupal_get_path('module', 'serchilo') . '/json/serchilo.json';
  serchilo_import($import_file, TRUE);

  $vocabularies = taxonomy_vocabulary_get_names();

  serchilo_create_user_namespaces($vocabularies['namespaces'], $vocabularies['namespace_types']);
  serchilo_set_default_user_settings();
}

/**
 * Implements hook_enable().
 */
function serchilo_enable() {
  // Set some variables
  // (Strongarm somehow looses these ones, 
  // so we need to do set them manually)
  variable_set('theme_default', 'bootstrap_serchilo');
  variable_set('pathauto_node_pattern', '[node:title]');
  variable_set('site_slogan', 'Search with Shortcuts.');
}

/**
 * Implements hook_uninstall().
 */
function serchilo_uninstall(){
  #$vocabularies = taxonomy_vocabulary_get_names();
  #taxonomy_vocabulary_delete($vocabularies['namespaces']->vid);
  #taxonomy_vocabulary_delete($vocabularies['namespace_types']->vid);
}

/**
 * Implements hook_install().
 */
function serchilo_schema() {

  $schema['serchilo_shortcut'] = array(
    'description' => 'Mirrored nodes of type shortcut for faster access.',
    'fields' => array(
      'nid' => array(
        'description' => 'The node id.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The node title.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'keyword' => array(
        'description' => 'The keyword.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'argument_names' => array(
        'description' => 'The argument names, as string, seperated by comma.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'argument_count' => array(
        'description' => 'The number of arguments.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'url' => array(
        'description' => 'The target URL of the shortcut, placeholders marked with {s:foo}, according to http://www.opensearch.org/Specifications/OpenSearch/1.1#OpenSearch_URL_template_syntax',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'weight' => array(
        'description' => 'The weight. Used for ordering in autocomplete.',
        'type' => 'float',
        'not null' => FALSE,
      ),
      'invisible' => array(
        'description' => 'If true, shortcut will not be shown in listings. Usefull for deleted shortcuts still being accessible for backwards compatibility.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'set_referrer' => array(
        'description' => 'If true, will redirect the shortcut via HTML refresh, to set a referrer.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'namespace_id' => array(
        'description' => 'The namespace id.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'namespace_name' => array(
        'description' => 'The namespace name, corresponding to the namespace id.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'input_encoding' => array(
        'description' => 'The input encoding of the URL arguments.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'tags' => array(
        'description' => 'The tags of the shortcut, as string, separated by comma.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );
 
  $schema['serchilo_shortcut_log'] = array(
    'description' => 'Logged shortcut calls.',
    'fields' => array(
      'id' => array(
        'description' => 'The id of the call.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'shortcut_id' => array(
        'description' => 'The shortcut node id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'namespace_id' => array(
        'description' => 'The namespace term id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'called' => array(
        'description' => 'The UNIX timestamp when the call happened.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );
 
  return $schema;
}


function serchilo_create_user_namespaces($vocabulary_namespaces, $vocabulary_namespace_types) {

  $namespace_type = serchilo_taxonomy_ensure_term('user', 'namespace_types');

  # creating user NS

  $users = entity_load('user');
  foreach($users as $user) {
    # omit anonymous user
    if ($user->uid == 0) {
      continue; 
    }
    
    if (!taxonomy_get_term_by_name($user->name, 'namespaces')) {
      $namespace              = new StdClass;
      $namespace->name        = $user->name;
      $namespace->description = $namespace_description;
      $namespace->vid         = (int) $vocabulary_namespaces->vid;
      $namespace->field_namespace_type[LANGUAGE_NONE][0]['tid'] = $namespace_type->tid;
      taxonomy_term_save($namespace);
    }
  }
}

function serchilo_set_default_user_settings() {

  $default_language_namespace = array_shift(taxonomy_get_term_by_name(SERCHILO_DEFAULT_LANGUAGE, 'namespaces') ?: array());
  $default_country_namespace  = array_shift(taxonomy_get_term_by_name(SERCHILO_DEFAULT_COUNTRY, 'namespaces') ?: array());

  $accounts = entity_load('user');

  foreach($accounts as $account) {
    # omit anonymous user
    if ($account->uid == 0) {
      continue; 
    }

    $account->field_language_namespace[LANGUAGE_NONE][0]['tid'] = $default_language_namespace->tid;
    $account->field_country_namespace[LANGUAGE_NONE][0]['tid'] = $default_country_namespace->tid;
    user_save($account);
  }
}


/**
 * Setup forms to be protected with Spamicide.
 *
 * @return void
 */
function serchilo_set_spamicide() {

  // Rename form_field to "city".
  db_update('spamicide')
    ->condition('form_id', 'user_register_form')
    ->fields(array(
      'form_field' => 'city',
      'enabled' => 1,
    ))
    ->execute();

  // Insert spamicide for shortcut_node_form.
  db_insert('spamicide')
    ->fields(array(
      'form_id' => 'shortcut_node_form',
      'form_field' => 'city',
      'enabled' => 1,
    ))
    ->execute();
}

