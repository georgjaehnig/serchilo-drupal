<?PHP

/**
 * Implements hook_install().
 */
function serchilo_install(){

  module_load_include('module', 'taxonomy', 'taxonomy');

  $vocabularies = taxonomy_vocabulary_get_names();
  serchilo_create_namespaces_from_file($vocabularies['namespaces'], $vocabularies['namespace_types']);
  serchilo_create_user_namespaces($vocabularies['namespaces'], $vocabularies['namespace_types']);

  //serchilo_add_defaults_to_admin();

}

/**
 * Implements hook_uninstall().
 */
function serchilo_uninstall(){
  #$vocabularies = taxonomy_vocabulary_get_names();
  #taxonomy_vocabulary_delete($vocabularies['namespaces']->vid);
  #taxonomy_vocabulary_delete($vocabularies['namespace_types']->vid);
}

function serchilo_create_namespaces_from_file($vocabulary_namespaces, $vocabulary_namespace_types) {

  # read from file
  $module_path = drupal_get_path('module', 'serchilo');
  $lines = file($module_path . '/csv/namespaces.csv');

  $languages = array();
  # create objects from lines in file
  foreach ($lines as $line) {
    $line = trim($line);

    # skip comments and empty lines
    if (
      (!$line) ||
      $line[0] == '#'
    ) {
      continue; 
    }

    $values = explode("\t", $line);
    
    #if (count($values) !=3) {
    #  echo "Error in $line \n"; 
    #}
    $namespace_type_name = $values[0];
    $namespace_name = $values[1];
    $namespace_description = $values[2];

    $namespace_type = _serchilo_taxonomy_ensure_term($namespace_type_name, 'namespace_types');

    if (!taxonomy_get_term_by_name($namespace_name, 'namespaces')) {
      $namespace              = new StdClass;
      $namespace->name        = $namespace_name;
      $namespace->description = $namespace_description;
      $namespace->vid         = (int) $vocabulary_namespaces->vid;
      $namespace->field_namespace_type[LANGUAGE_NONE][0]['tid'] = $namespace_type->tid;
      taxonomy_term_save($namespace);
    }
  }
}

function serchilo_create_user_namespaces($vocabulary_namespaces, $vocabulary_namespace_types) {

  $namespace_type = _serchilo_taxonomy_ensure_term('user', 'namespace_types');

  # creating user NS

  $users = entity_load('user');
  foreach($users as $user) {
    # omit anonymous user
    if ($user->uid == 0) {
      continue; 
    }
    # omit admin user 
    # because "admin" in path must call admin interface
    # --removing that since (currently) there is no path conflict
    /*
    if ($user->name == 'admin') {
      continue; 
    }
     */
    
    if (!taxonomy_get_term_by_name($user->name, 'namespaces')) {
      $namespace              = new StdClass;
      $namespace->name        = $user->name;
      $namespace->description = $namespace_description;
      $namespace->vid         = (int) $vocabulary_namespaces->vid;
      $namespace->field_namespace_type[LANGUAGE_NONE][0]['tid'] = $namespace_type->tid;
      taxonomy_term_save($namespace);
    }
  }
}

function _serchilo_taxonomy_ensure_term($term_name, $vocabulary_name, $term = array()) {

  $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  # if namespace_type does not exist yet:
  # create it
  if(empty($term_list)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $term = array(
      'name' => $term_name,
      'vid' => (int) $vocabulary->vid,
    ) + $term;
    $term = (object) $term;
    taxonomy_term_save($term);
    $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  }
  # get first element, the only one
  $term = array_shift($term_list);
  return $term;
}
