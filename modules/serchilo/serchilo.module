<?php

require_once('serchilo.constants.inc');

// HOOKS 

/**
 * Implements hook_menu().
 */
function serchilo_menu() {

  $items = array(

    'node' => array(
      'page callback' => 'serchilo_page_home',
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

    NAMESPACES_PATH_AFFIX => array(
      'page callback' => 'serchilo_page_dispatch_namespaces',
      'page arguments' => array(CONSOLE, 1),
      #'page callback' => 'serchilo_page_console_namespace',
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),
    USER_PATH_AFFIX . '/%' => array(
      'page callback' => 'serchilo_page_dispatch_user',
      'page arguments' => array(CONSOLE, 1),
      #'page callback' => 'serchilo_page_console_user',
      #'page arguments' => array(1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

    OPENSEARCH_DEFINITION_PATH_AFFIX . '/' . NAMESPACES_PATH_AFFIX => array(
      'page callback' => 'serchilo_page_opensearch',
      'page arguments' => array(1, 2),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.opensearch.inc',
    ),
    OPENSEARCH_DEFINITION_PATH_AFFIX . '/' . USER_PATH_AFFIX . '/%' => array(
      'page callback' => 'serchilo_page_opensearch',
      'page arguments' => array(1, 2),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.opensearch.inc',
    ),

    'user/%user/shortcuts' => array(
      'title' => 'My shortcuts',
      'page callback' => 'serchilo_page_user_shortcuts',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_LOCAL_TASK,
      'file' => 'serchilo.pages.user.inc',
    ),

    // Change console namespaces

    NAMESPACES_PATH_AFFIX . '/%/edit' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('serchilo_form_console_namespaces', 1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.edit.inc',
      'title' => 'Change namespaces',
    ),

    // Shortcut 'changed' view

    'shortcut/%/changed' => array(
      'page callback' => 'serchilo_page_shortcut_changed',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
      'file' => 'serchilo.pages.shortcut.inc',
    ),

    // Redirect broken Shortcut URLs

    'shortcut/%' => array(
      'page callback' => 'serchilo_redirect_shortcuts',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.redirect.inc',
    ),

  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function serchilo_menu_alter(&$items) {

  // Rename user edit tab.
  $items['user/%user/edit']['title'] = 'My account';

  // Make shortcut clone link a tab.
  $items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;

  // Rename shortcut clone tab.
  $items['node/%node/clone/%clone_token']['title'] = 'Clone';
  $items['node/%node/clone/%clone_token']['title callback'] = '';
}

/**
 * Implements hook_node_presave().
 */
function serchilo_node_presave($node) {

  if ($node->type == 'shortcut') {
    // derive and set url metadata
    $url = drupal_array_get_nested_value($node->field_url, array(LANGUAGE_NONE, 0, 'value'));
    $argument_names = serchilo_get_argument_names($url);
    drupal_array_set_nested_value($node->field_argument_names, array(LANGUAGE_NONE, 0, 'value'), join(', ', $argument_names));
    drupal_array_set_nested_value($node->field_argument_count, array(LANGUAGE_NONE, 0, 'value'), count($argument_names));

    // revoke moderation flag
    // if non-sensible edit
    $is_sensible_edit = serchilo_is_sensible_edit($node);
    if (!$is_sensible_edit) {
      $node->revision_operation = REVISIONING_NEW_REVISION_NO_MODERATION;
    }
  }
}

/**
 * Implements hook_theme().
 */
function serchilo_theme() {
  return array(
    'serchilo-console' => array(
      'template' => 'serchilo-console', 
      'variables' => array('query' => null), 
      'path' => drupal_get_path('module', 'serchilo') . '/templates',
    ),
    'serchilo-opensearch' => array(
      'template' => 'serchilo-opensearch', 
      'variables' => array('content' => null), 
      'path' => drupal_get_path('module', 'serchilo') . '/templates',
    ),
    /*
    'serchilo-redirect' => array(
      'template' => 'serchilo-redirect', 
      'variables' => array('content' => null), 
    ),
    'serchilo_definition_list' => array(
      'variables' => array('items' => array(), 'title' => NULL, 'attributes' => array()),
      'file' => 'serchilo.theme.inc',
    ),
     */
  );
}


// BLOCK HOOKS

/**
 * Implements hook_block_info().
 */
function serchilo_block_info() {

  $blocks = array();

  $blocks['namespaces'] = array(
    'info' => 'Namespaces',
    'status' => 1,
    'region' => 'header',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function serchilo_block_view($delta='') {

  $block = array();

  switch ($delta) {
    case 'namespaces':
      $block['subject'] = NULL;
      $block['content'] = serchilo_block_namespaces();
      break;
  }

  return $block;
}

/**
 * Display current namespaces.
 */
function serchilo_block_namespaces() {

  $namespaces = drupal_static('serchilo_namespaces');

  // Get out if no namespaces are set.
  if (count($namespaces) == 0) {
    return;
  }

  // Create links for all namespaces.
  $namespace_links = array();
  foreach ($namespaces as $namespace) {
    $uri = entity_uri('taxonomy_term', $namespace);
    $namespace_links[] = array(
      '#type' => 'link',
      '#title' => $namespace->name,
      '#href' => $uri['path'],
      '#options' => $uri['options'],
      '#attributes' => array(
        'class' => array('namespace'),
        'title' => $namespace->description,
      ),
    );

  }

  // Create edit link if namespaces are editable.
  if (NAMESPACES_PATH_AFFIX == arg(0)) {
    $link_path = NAMESPACES_PATH_AFFIX . '/' . arg(1) . '/edit';
  }
  else if (user_is_logged_in()) {
    $uri = entity_uri('user', $GLOBALS['user']);
    $link_path = $uri['path'] . '/edit';
  }

  if (isset($link_path)) {
    $edit_link = array(
      '#type' => 'link',
      '#title' => 'change',
      '#href' => $link_path,
      '#attributes' => array(
        'class' => array('tab'),
      ),
    );
  }
  else {
    $edit_link = array();
  }
 
  return array_merge(
    $namespace_links,
    array($edit_link)
  );
}


// NODE HOOKS

/**
 * Implements hook_node_insert().
 */
function serchilo_node_insert($node) {
  if ($node->type == 'shortcut') {
    if (!$node->revision_moderation) {
      serchilo_insert_shortcut_row($node);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function serchilo_node_update($node) {
  if ($node->type == 'shortcut') {
    if (!$node->revision_moderation) {
      serchilo_insert_or_update_shortcut_row($node);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function serchilo_node_delete($node) {
  if ($node->type == 'shortcut') {
    serchilo_delete_shortcut_row($node);
  }
}

/**
 * Implements hook_revision_publish().
 */
function serchilo_revision_publish($node) {
  if ($node->type == 'shortcut') {
    serchilo_insert_or_update_shortcut_row($node);
  }
}

/**
 * Implements hook_node_view().
 */
function serchilo_node_view($node, $view_mode, $langcode) {
  $node->content['shortcut_call_form'] = drupal_get_form('serchilo_shortcut_call_form', $node);
}


// FORM HOOKS

// Shortcut call form

/**
 * Implements hook_FORM_ID_form().
 *
 * Builds a form for calling a shortcut.
 *
 * @param array $form
 * @param array $form_state
 *   Standard form hook arguments.
 *
 * @param object $node
 *   The node of type shortcut
 *   to build the from.
 *
 * @return array $form
 *   The built form.
 */
function serchilo_shortcut_call_form($form, $form_state, $node) {

  $form = array();

  $form['#attributes']['class'] = array('form-inline'); 
  $form['#attributes']['role'] = 'form'; 

  /*
  // TODO:
  // Check this again. Can't believe this needs to be so bloated. 
  $items = field_get_items('node', $node, 'field_namespace');
  $namespace_value = field_view_value('node', $node, 'field_namespace', $items[0]);
  $namespace_html = render($namespace_value);
  */
  $form['keyword'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#value' => 
      #render($node->field_namespace ) .
      #$namespace_html .
      #'.' .
      $node->field_keyword[LANGUAGE_NONE][0]['value'],
    '#attributes' => array(
      'class' => array('keyword', 'form-group'), 
    ),
  );

  $form['arguments']['#tree'] = true;

  if (!empty($node->field_argument_names[LANGUAGE_NONE][0]['value'])) {
    $argument_names = explode(',', $node->field_argument_names[LANGUAGE_NONE][0]['value']);
  }
  else {
    $argument_names = array();
  }
  for ($i=0; $i<count($argument_names); $i++) {
    $argument_name = $argument_names[$i];

    #$argument_example = (array_key_exists($i, $argument_examples) ? $argument_examples[$i] : '');
    $form['arguments'][$i] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#size' => 0,
      '#attributes' => array(
        'placeholder' => $argument_name,
      ), 
    );
  }

  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );

  return $form;
}

/**
 * Implements hook_FORM_ID_form_submit().
 *
 * Builds a query out of the shortcut form arguments
 * and redirects it to the query handler.
 *
 * @param array $form
 * @param array $form_state
 *   Standard form hook arguments.
 *
 * @return void
 */
function serchilo_shortcut_call_form_submit($form, &$form_state) {

  if (user_is_logged_in()) {
    // Logged users call their user path.
    global $user; 
    $path = 'u/' . $user->name;
  } else {
    // Anonymous user get the default language and country namespace.
    $path = 'n/' .
      serchilo_get_default_language_namespace()->name .
      '.' .
      serchilo_get_default_country_namespace()->name .
      '';
  }
  $url = url(
    $path,
    array(
      'query' => array(
        'query' => 
        // Force namespace of current shortcut
        $form_state['values']['node']->field_namespace[LANGUAGE_NONE][0]['taxonomy_term']->name .
        '.' . 
        // Prepend keyword
        $form_state['values']['node']->field_keyword[LANGUAGE_NONE][0]['value'] .
        ' ' .
        // Add submitted arguments
        join(',', $form_state['values']['arguments'])
      ) 
    ) 
  );
  global $base_url;
  $url = $base_url . $url;
  drupal_goto($url);
}


// Shortcut node (edit) form

/**
 * Implements hook_form_alter().
 */
function serchilo_form_shortcut_node_form_alter(&$form, &$form_state, $form_id) {
  $form['title']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_keyword'][LANGUAGE_NONE][0]['value']['#element_validate'] = array(
    'serchilo_form_validate_no_tags',
    'serchilo_form_validate_no_dots',
    'serchilo_form_validate_no_whitespace',
    'serchilo_form_validate_lowercase',
  );
  $form['field_argument_names'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_url'           ][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  foreach (element_children($form['field_example'][LANGUAGE_NONE]) as $index) {
    if (is_int($index)) {
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_arguments  '][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_description'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
    }
  }
}

/**
 * Validate a form element that should contain no HTML tags.
 */
function serchilo_form_validate_no_tags($element, &$form_state) {
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != preg_replace('/<.*>/', '', $value)) {
    form_error(
      $element, 
      t(
        '@title must not contain HTML tags.', 
        array(
          '@title' => $element['#title'], 
        )
      )
    );
  }
}

/**
 * Validate a form element that should contain no dots.
 */
function serchilo_form_validate_no_dots($element, &$form_state) {
  $value = drupal_array_get_nested_value( $form_state['values'], $element['#parents']);
  if (strpos($value, '.') !== FALSE) {
    form_error(
      $element,
      t(
        'No dots are allowed in the keyword, since !dots_are used_for_forcing_a_namespace.',
        array(
          '!dots_are used_for_forcing_a_namespace' => l(t('dots are used for forcing a namespace'), 'help/namespaces', array('fragment'=>'force')) 
        )
      )
    );
  }
}

/**
 * Validate a form element that should contain no whitespace.
 */
function serchilo_form_validate_no_whitespace($element, &$form_state) {

  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != preg_replace('/\s*/', '', $value)) {
    form_error(
      $element, 
      t(
        '@title must not contain spaces.', 
        array(
          '@title' => $element['#title'], 
        )
      )
    );
  }
}

/**
 * Validate a form element that must be lowercase.
 */
function serchilo_form_validate_lowercase($element, &$form_state) {

  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != strtolower($value)) {
    form_error(
      $element, 
      t(
        '@title must be lowercase.', 
        array(
          '@title' => $element['#title'], 
        )
      )
    );
  }
}

/**
 * Implements hook_node_validate().
 */
function serchilo_node_validate($node, $form, &$form_state) {

  if ($node->type == 'shortcut') {

    $efq = new EntityFieldQuery;

    $result = $efq
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'shortcut')
      ->fieldCondition('field_keyword',        'value',  $node->field_keyword[LANGUAGE_NONE][0]['value'])
      ->fieldCondition('field_argument_count', 'value',  $node->field_argument_count[LANGUAGE_NONE][0]['value'])
      ->fieldCondition('field_namespace',      'tid',    $node->field_namespace[LANGUAGE_NONE][0]['tid'])
      ->execute();

    // If found a colliding shortcut:
    if (!empty($result)) {
      $existing_shortcut_nid = array_keys($result['node'])[0];
      $existing_shortcut = node_load($existing_shortcut_nid);
      form_set_error(
        'field_keyword',
        format_plural(
          $existing_shortcut->field_argument_count[LANGUAGE_NONE][0]['value'],
          'The shortcut !title is already using the keyword %keyword and %argument_count argument.',
          'The shortcut !title is already using the keyword %keyword and %argument_count arguments.',
          array(
            '!title' => l($existing_shortcut->title, 'node/' . $existing_shortcut->nid),
            '%keyword' => $existing_shortcut->field_keyword[LANGUAGE_NONE][0]['value'],
            '%argument_count' => $existing_shortcut->field_argument_count[LANGUAGE_NONE][0]['value'],
          )
        )
      );
    }
  }
}


// User register form

/**
 * Implements hook_form_FORM_ID_alter().
 */
function serchilo_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['field_language_namespace']['#access'] = FALSE;
  $form['field_country_namespace']['#access'] = FALSE;
  $form['#validate'][] = 'serchilo_form_user_register_form_validate';
}

/**
 * Validate user registration.
 */
function serchilo_form_user_register_form_validate($form, &$form_state) {

  # lowercase username
  $form_state['values']['name'] = strtolower($form_state['values']['name']);
  
  # Extract the submitted name
  $name = $form_state['values']['name'];

  // Make sure length is >=4.
  // Shorter lengths are reserved for site namespaces like language and country 
  // namespaces.
  if (strlen($name) < 4) {
    form_set_error('name', t('The username must contain at least 4 characters.'));
  }

  // Exclude dots and dashes.
  // (Names will be namespaces, dots are used to separate namespaces. And for 
  // dashes I forgot the reason. :-/ )
  if (
    (strpos($name, '.') !== false) ||
    (strpos($name, '-') !== false) 
  ) {
    form_set_error('name', t('The username must not contain "." or "-".'));
  }

  // Disallow user names that collide with existing paths.
  if (in_array($name, array('login', 'autocomplete', 'login', 'register', 'password', 'reset', 'logout'))) {
    form_set_error('name', t('This username is not allowed.'));
  }
}

/**
 * Implements hook_user_presave().
 */
function serchilo_user_presave(&$edit, $account, $category) {
  // set default language and country namespace if necessary
  if (empty($edit['field_language_namespace'][LANGUAGE_NONE])) {
     $edit['field_language_namespace'][LANGUAGE_NONE][0] = (array) serchilo_get_default_language_namespace();
  }
  if (empty($edit['field_country_namespace'][LANGUAGE_NONE])) {
     $edit['field_country_namespace'][LANGUAGE_NONE][0] = (array) serchilo_get_default_country_namespace();
  }
  // create user namespace if necessary
  $term['field_namespace_type'][LANGUAGE_NONE][0] = (array) serchilo_taxonomy_ensure_term('user', 'namespace_types');
  serchilo_taxonomy_ensure_term($edit['name'], 'namespaces', $term);
}


// Options list for namespaces

/**
 * Creates an options list of namespaces of a given namespace_type.
 *
 * @param string $namespace_type
 *   The namespace type, e.g. 'language' or 'country'.
 *
 * @return array $options
 *   The generated options list.
 */
function serchilo_options_list_namespace_by_type($namespace_type) {

  $namespace_type_id = key(taxonomy_get_term_by_name($namespace_type, 'namespace_types'));

  $efq = new EntityFieldQuery;

  $result = $efq
    ->entityCondition('entity_type', 'taxonomy_term')
    ->fieldCondition('field_namespace_type', 'tid',  $namespace_type_id)
    ->propertyOrderBy('description')
    ->execute();

  $namespace_ids = array_keys(array_shift($result));
  $namespaces = taxonomy_term_load_multiple($namespace_ids);

  $options = array();
  foreach ($namespaces as $namespace) {
    $options[$namespace->tid] = $namespace->description . ' (' . $namespace->name . ')';
  }
  return $options;
}

/**
 * Custom options list callback.
 */
function serchilo_options_list_language_namespace() {
  return serchilo_options_list_namespace_by_type('language');
}

/**
 * Custom options list callback.
 */
function serchilo_options_list_country_namespace() {
  return serchilo_options_list_namespace_by_type('country');
}


// DB HELPER FUNCTIONS

/**
 * Retrieve database fields from shortcut node.
 *
 * @param $node
 *   Node of type shortcut
 * @return
 *   array to pass to fields()
 */
function serchilo_shortcut_to_db_fields($node) {

  $fields = array(
    'nid' => $node->nid,
    'title' => $node->title,
    'keyword' =>        drupal_array_get_nested_value($node->field_keyword,        array(LANGUAGE_NONE, 0, 'value')),
    'argument_names' => drupal_array_get_nested_value($node->field_argument_names, array(LANGUAGE_NONE, 0, 'value')),
    'argument_count' => drupal_array_get_nested_value($node->field_argument_count, array(LANGUAGE_NONE, 0, 'value')),
    'url' =>            drupal_array_get_nested_value($node->field_url,            array(LANGUAGE_NONE, 0, 'value')),
    'input_encoding' => drupal_array_get_nested_value($node->field_input_encoding, array(LANGUAGE_NONE, 0, 'value')),
    'weight' =>         drupal_array_get_nested_value($node->field_weight,         array(LANGUAGE_NONE, 0, 'value')),
    'invisible' =>      drupal_array_get_nested_value($node->field_invisible,      array(LANGUAGE_NONE, 0, 'value')),
    'set_referrer' =>   drupal_array_get_nested_value($node->field_set_referrer,   array(LANGUAGE_NONE, 0, 'value')),
    'namespace_id' =>   drupal_array_get_nested_value($node->field_namespace,      array(LANGUAGE_NONE, 0, 'tid'  )),
    'namespace_name' => drupal_array_get_nested_value($node->field_namespace,      array(LANGUAGE_NONE, 0, 'name' )),
  );

  return $fields;
}

function serchilo_insert_or_update_shortcut_row($node) {
  $row_count = db_select('serchilo_shortcut') 
    ->fields('serchilo_shortcut')
    ->condition('nid', $node->nid )
    ->execute()
    ->rowCount() 
    ;
  if ($row_count == 0) {
    serchilo_insert_shortcut_row($node); 
  }
  else {
    serchilo_update_shortcut_row($node); 
  }
}

function serchilo_insert_shortcut_row($node) {
  $fields = serchilo_shortcut_to_db_fields($node);
  $result = db_insert('serchilo_shortcut') 
    ->fields($fields)
    ->execute();
  //dpm($result);
  return;
}

function serchilo_update_shortcut_row($node) {
  $fields = serchilo_shortcut_to_db_fields($node);
  $num_updated = db_update('serchilo_shortcut') 
    ->fields($fields)
    ->condition('nid', $node->nid )
    ->execute();
  // TODO
  // raise error when $num_updated != 1
  //dpm($num_updated);
  return $num_updated;
}

function serchilo_delete_shortcut_row($node) {
  $num_deleted = db_delete('serchilo_shortcut') 
    ->condition('nid', $node->nid )
    ->execute();
  // TODO
  // raise error when $num_deleted != 1
  dpm($num_deleted);
}


// SHORTCUT HELPERS

function serchilo_get_argument_names($url) {

  // parse url for arguments
  preg_match_all(
    // ? makes ungreedy
    '/\{s:(.+?)\}/',
    $url,
    $matches,
    PREG_PATTERN_ORDER
  );
  $argument_names = $matches[1];

  // treat arguments with same name as only one argument
  $argument_names = array_unique($argument_names);

  // make sure indexes have no gaps
  $argument_names = array_values($argument_names);

  return $argument_names;
}

/**
 * Check if shortcut edit is sensible edit.
 *
 * @param $node
 *   Node of type shortcut.
 * @return 
 *   TRUE if edit is sensible.
 */
function serchilo_is_sensible_edit($node)
{
  $is_sensible_edit = NULL;
  // TODO:
  // better use node_type_get_type() ?
  if ($node->type == 'shortcut') {
    if (empty($node->is_new)) {
      $is_sensible_edit = (
        (
          // change in keyword
          drupal_array_get_nested_value($node->original->field_keyword, array(LANGUAGE_NONE, 0, 'value')) 
          != drupal_array_get_nested_value($node->field_keyword, array(LANGUAGE_NONE, 0, 'value'))
        ) 
        ||
        (
          // change in url
          drupal_array_get_nested_value($node->original->field_url, array(LANGUAGE_NONE, 0, 'value')) 
          != drupal_array_get_nested_value($node->field_url, array(LANGUAGE_NONE, 0, 'value'))
        ) 
        ||
        (
          // change in namespace
          drupal_array_get_nested_value($node->original->field_namespace, array(LANGUAGE_NONE, 0, 'tid')) 
          != drupal_array_get_nested_value($node->field_namespace, array(LANGUAGE_NONE, 0, 'tid'))
        ) 
      );
    }
    else {
      // every new shortcut is sensible
      $is_sensible_edit = TRUE;
    }
  }
  return $is_sensible_edit;
}


// PHP HELPERS

function serchilo_array_value($array, $key, $default_value = null) {
  if (isset($array[$key])) {
    return $array[$key];
  }
  return $default_value;
}


// OPENSEARCH HELPERS

/**
 * Return the title for the Opensearch head link.
 *
 * @param $namespaces_path
 *    String of namespaces seperated by NAMESPACE_PATH_SEPARATOR.
 * @param $default_keyword
 *    (optional) String of the default keyword.
 * @return $title
 *    String of the Opensearch head link.
 */
function serchilo_opensearch_title($namespaces_path, $default_keyword = NULL) {
  if( $default_keyword ) {
    $title =  'Serchilo: ' . $namespaces_path . ' | ' . $default_keyword;
  }
  else {
    $title =  'Serchilo: ' . $namespaces_path;
  }
  return $title;
}


// DISPATCH HELPERS

/**
 * Loads default language namespace.
 *
 * @return $language_namespace 
 *   A Taxonomy term object.
 */
function serchilo_get_default_language_namespace() {
  global $language;

  $default_language = $language->language;
  $language_namespace = current(taxonomy_get_term_by_name($default_language, 'namespaces')); 

  return $language_namespace;
}

/**
 * Loads default country namespace.
 *
 * @return $language_namespace 
 *   A Taxonomy term object.
 */
function serchilo_get_default_country_namespace() {

  $ip_address = ip_address();

  # set debug IP
  if ('127.0.0.1' == $ip_address) {
    $ip_address = '78.55.17.101';
  }
  $default_country_namespace_name = @geoip_country_code3_by_name($ip_address);
  $default_country_namespace_name = strtolower($default_country_namespace_name);

  if (
    (!$default_country_namespace_name) ||
    (strlen($default_country_namespace_name) != 3 )
  ) {
    $default_country_namespace_name  = DEFAULT_COUNTRY;
  }

  /*
  # fallback if geoip did not find anything
  if (
    (!$default_country_namespace_name) ||
    (strlen($default_country_namespace_name) != 3 )
  ) {

    if (!isset($_SESSION['smart_ip'])) {
      $location = smart_ip_get_location($ip_address);
      smart_ip_set_session_data($location);
    }

    if ( $_SESSION['smart_ip']['location']['country_code'] ) {
      module_load_include('inc', 'serchilo', 'serchilo');
      $default_country_namespace_name = strtolower(
        serchilo_2letter_to_3letter_country_code( $_SESSION['smart_ip']['location']['country_code'])
      );
    }
    watchdog('serchilo', 'Retrieved coutry by IP via smart_ip: ' . $default_country_namespace_name);
  }
   */
  $default_country_namespace = current(taxonomy_get_term_by_name($default_country_namespace_name, 'namespaces')); 

  return $default_country_namespace;
}


// IMPORT

function serchilo_import_shortcuts($file = NULL, $verbose = FALSE) {

  if ($verbose) {
    echo "Importing data:\n";
  }

  if (!file_exists($file)) {
    return 'Could not find file ' . $file;
  }

  $data_json = file_get_contents($file);
  $data = drupal_json_decode($data_json);

  if ($data === NULL) {
    return 'Could not parse file ' . $file;
  }

  if ($verbose) {
    echo "Importing namespaces...\n";
  }

  $rows = $data['namespaces']; 
  $vocabularies = taxonomy_vocabulary_get_names();
  foreach ($rows as $row) {

    $namespace         = new StdClass;
    $namespace->vid    = (int) $vocabularies['namespaces']->vid;
    $namespace->format = 'plain_text';

    foreach (array_keys($row) as $key) {
      switch ($key) {
      case 'type':
        $namespace_type = serchilo_taxonomy_ensure_term($row[$key], 'namespace_types');
        $namespace->field_namespace_type[LANGUAGE_NONE][0]['tid'] = $namespace_type->tid;
        break;
      case 'name':
      case 'description':
        $namespace->{$key} = $row[$key];
        break;
      }
    }
    taxonomy_term_save($namespace);

    echo '.';
  }

  $rows = $data['shortcuts']; 

  //for debug: try to import only 1
  //$rows = array_slice($rows, 0, 1);

  if ($verbose) {
    echo "Importing shortcuts...\n";
  }
  foreach ($rows as $row) {
    $namespace = serchilo_taxonomy_ensure_term($row['namespace'], 'namespaces');
    $shortcut = new StdClass;
    $shortcut->type = 'shortcut';
    $shortcut->uid = 1;
    $shortcut->status = 1;
    $shortcut->comment = COMMENT_NODE_OPEN;
    $shortcut->revision_moderation = FALSE;
    $shortcut->title = $row['title'];
    drupal_array_set_nested_value($shortcut->field_keyword,        array( LANGUAGE_NONE, 0, 'value'), $row['keyword']);
    drupal_array_set_nested_value($shortcut->field_argument_names, array( LANGUAGE_NONE, 0, 'value'), $row['argument_names']);
    drupal_array_set_nested_value($shortcut->field_argument_count, array( LANGUAGE_NONE, 0, 'value'), count(explode(',', $row['argument_names'])));
    drupal_array_set_nested_value($shortcut->field_url,            array( LANGUAGE_NONE, 0, 'value'), $row['url']);
    drupal_array_set_nested_value($shortcut->field_weight,         array( LANGUAGE_NONE, 0, 'value'), $row['weight']);
    drupal_array_set_nested_value($shortcut->field_invisible,      array( LANGUAGE_NONE, 0, 'value'), $row['invisible']);
    drupal_array_set_nested_value($shortcut->field_set_referrer,   array( LANGUAGE_NONE, 0, 'value'), $row['set_referrer']);
    drupal_array_set_nested_value($shortcut->field_command_id,     array( LANGUAGE_NONE, 0, 'value'), $row['id']);
    drupal_array_set_nested_value($shortcut->field_namespace,      array( LANGUAGE_NONE, 0 ), (array) $namespace);
    for ($i=0; $i<count($row['tags']); $i++) {
      #print_r( $row['tags'][$i]);
      $tag = serchilo_taxonomy_ensure_term($row['tags'][$i], 'tags');
      drupal_array_set_nested_value($shortcut->field_tags, array( LANGUAGE_NONE, $i, 'tid'), $tag->tid);
    }
    for ($i=0; $i<count($row['examples']); $i++) {
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_example'));
      $field_collection_item->setHostEntity('node', $shortcut);
      $field_collection_item->field_example_arguments[LANGUAGE_NONE][]['value'] = $row['examples'][$i][0];
      $field_collection_item->field_example_description[LANGUAGE_NONE][]['value'] = $row['examples'][$i][1];
      $field_collection_item->save();
    }
    node_save($shortcut);
    echo ".";
  }
}

function serchilo_taxonomy_ensure_term($term_name, $vocabulary_name, $term = array()) {

  $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  # if namespace_type does not exist yet:
  # create it
  if(empty($term_list)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $term = array(
      'name' => $term_name,
      'vid' => (int) $vocabulary->vid,
      'format' => 'plain_text',
    ) + $term;
    $term = (object) $term;
    taxonomy_term_save($term);
    $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  }
  # get first element, the only one
  $term = array_shift($term_list);
  return $term;
}

