<?php

require_once('serchilo.constants.inc');
require_once('serchilo.overall.inc');

// HOOKS 

/**
 * Implements hook_watchdog().
 */
function serchilo_watchdog($log_entry) {

  $last_watchdog_mail = (int) variable_get('serchilo_last_watchdog_mail');
  $site_mail          =       variable_get('site_mail');

  // Mail all PHP errors to $site_mail.
  if (
    ('php' == $log_entry['type']) &&
    //(strpos($log_entry['variables']['%file'],'custom/serchilo') !== false) &&
    ( $last_watchdog_mail < time() - SERCHILO_WATCHDOG_MAIL_INTERVAL ) &&
    TRUE
  ) {
    $params['subject'] = 'Error on new Serchilo';
    $params['body'] = 
      'log_entry: ' . var_export($log_entry, TRUE) .
      ''
    ;
    //drupal_mail('serchilo', 'error', $site_mail, LANGUAGE_NONE, $params);
    variable_set('serchilo_last_watchdog_mail', time());
  }
}

/**
 * Implements hook_static_content_dirs().
 */
function serchilo_static_content_dirs() {
  $dir = drupal_get_path('module', 'serchilo') . '/static_content';
  return array(
    $dir => array()
  );
}

/**
 * Implements hook_permission().
 */
function serchilo_permission() {

  $items = array();
  $items['approve shortcut content'] = array(
    'title' => t('Approve shortcuts'),
  );
  return $items;
}


// DIFF

/**
 * Implements hook_entity_diff_alter().
 */
function serchilo_entity_diff_alter(&$entity_diffs, $context) { 

  if ($context['entity_type'] = 'node') {
    if ($context['bundle'] = 'shortcut') {

      $order = array(
        'title',
        'field_keyword',
        'field_url',
        'field_namespace',
        'field_description',
        'field_example',
        'field_tags',
        'field_input_encoding',
        'field_post_parameters',
        'field_test',
        'field_set_referrer',
        'field_invisible',
        'field_weight',
        'field_command_id',
        'field_argument_names',
        'field_argument_count',
        'field_calls_total',
        'field_calls_last_30_days',
        'field_approved',
      );
      foreach($order as $index=>&$field_name) {
        if (!empty($entity_diffs[$field_name])) {
          $entity_diffs[$field_name]['#weight'] = $index; 
        }
      }

      // Remove hidden fields from diff.
      unset($entity_diffs['field_calls_last_30_days']);
      unset($entity_diffs['field_calls_total']);
      unset($entity_diffs['field_weight']);
      foreach (array('old', 'new') as $old_new) {
        $entity_diffs['field_example']['#'.$old_new] = join("\n", serchilo_render_field_collection_revision(
          $context[$old_new.'_entity']->field_example, 
          array('field_example_arguments','field_example_description'),
          '[field_example_arguments] → [field_example_description]'
        ));
      }
      foreach (array('old', 'new') as $old_new) {
        $entity_diffs['field_test']['#'.$old_new] = join("\n", serchilo_render_field_collection_revision(
          $context[$old_new.'_entity']->field_test, 
          array('field_test_arguments','field_test_expected_content'),
          '[field_test_arguments] → [field_test_expected_content]'
        ));
      }

      $mapping_approved = array(
        0 => '✖ (' . t('pending moderation') . ')',
        1 => '✔ (' . t('approved') . ')',
      );
      if (!empty($entity_diffs['field_approved'])) {
        $entity_diffs['field_approved']['#old'] = $mapping_approved[(int) $entity_diffs['field_approved']['#old']];
        $entity_diffs['field_approved']['#new'] = $mapping_approved[(int) $entity_diffs['field_approved']['#new']];
      }

      // TODO: Better display of field_approved.
    }
  }

}

/**
 * Render a field collection revision.
 *   (as https://www.drupal.org/node/1595702 remains unsolved.)
 *
 * @param array $field_collection 
 *   The field collection to render.
 * @param array $field_collection_field_names 
 *   The fields within the field collection to render.
 * @param string $template 
 *   The template to render the fields. 
 *   Should contain placeholders like [field_name].
 *
 * @return array $rendered_items 
 *   The rendered items.
 */
function serchilo_render_field_collection_revision($field_collection, $field_collection_field_names, $template) {

  if (empty($field_collection)) {
    return array(); 
  }

  $rendered_items = array();
  foreach ($field_collection[LANGUAGE_NONE] as $item) {
    $fcitem = field_collection_item_revision_load($item['revision_id']);

    // Do nothing if field collection item could not be loaded.
    if (empty($fcitem)) {
      continue; 
    }
    // Do nothing if field collection fields are empty.
    foreach($field_collection_field_names as $field_collection_field_name) {
      if (empty($fcitem->{$field_collection_field_name})) {
        continue 2;
      }
    }

    // Take template as the render item base.
    $render_item = $template;
    foreach($field_collection_field_names as $field_collection_field_name) {
      // Replace placeholder in template with field value.
      // (Assumes fields with only 1 value.)
      $render_item = str_replace(
        '['. $field_collection_field_name . ']', 
        $fcitem->{$field_collection_field_name}[LANGUAGE_NONE][0]['value'],
        $render_item
      );
    }
    $rendered_items[] = $render_item;
  }
  return $rendered_items;
}

/**
 * Implements hook_form_alter().
 */
function serchilo_form_diff_node_revisions_alter(&$form, &$form_state, $form_id) {
  
  // Prepend rendered field_approved to revision items in revisions overview.

  $mapping_approved = array(
    0 => '✖',
    1 => '✔',
  );

  foreach($form['info'] as $vid=>&$render) {
    $node = node_load($form['nid']['#value'], $vid);
    $approved = drupal_array_get_nested_value($node->field_approved, array(LANGUAGE_NONE, 0, 'value')) ?: 0;
    $render['#markup'] = 
      theme(
        'html_tag',
        array(
          'element' => array(
            '#tag' => 'span',
            '#value' => $mapping_approved[$approved],
            '#attributes' => array(
              'title' => 
                '✔ = ' . t('approved') . ', ' . 
                '✖ = ' . t('pending moderation')
            )
          ) 
        )
      ) .
      ' ' . 
      $render['#markup'];
  }
}


// CRON

/**
 * Implements hook_cronapi().
 */
function serchilo_cronapi($op, $job = NULL) {

  $items = array();

  $items['serchilo_export'] = array(
    'description' => 'Exports shortcuts and namespaces to the files directory.',
    'callback' => 'serchilo_export',
    // Every morning at 5:00 am.
    'rule' => '0 5 * * *', 
    'file' => 'serchilo.export.inc'
  );

  $items['serchilo_calculate_shortcut_calls'] = array(
    'description' => 'Calculate shortcut calls. Set the corresponding node fields.',
    'callback' => 'serchilo_calculate_shortcut_calls',
    // Every Monday at 4:00 am.
    'rule' => '0 4 * * 1', 
    'file' => 'serchilo.weights.inc'
  );

  $items['serchilo_calculate_shortcut_weights'] = array(
    'description' => 'Calculate shortcut weights.',
    'callback' => 'serchilo_calculate_shortcut_weights',
    // Every Monday at 4:30 am.
    'rule' => '30 4 * * 1', 
    'file' => 'serchilo.weights.inc'
  );

  return $items;
}


// MENU HOOKS

/**
 * Implements hook_menu().
 */
function serchilo_menu() {

  $items = array(

    'node' => array(
      'page callback' => 'serchilo_page_home',
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

    SERCHILO_NAMESPACES_PATH_AFFIX => array(
      'page callback' => 'serchilo_page_dispatch_namespaces',
      'page arguments' => array(SERCHILO_CONSOLE, 1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),
    SERCHILO_USER_PATH_AFFIX . '/%' => array(
      'page callback' => 'serchilo_page_dispatch_user',
      'page arguments' => array(SERCHILO_CONSOLE, 1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

    SERCHILO_OPENSEARCH_DEFINITION_PATH_AFFIX . '/' . SERCHILO_NAMESPACES_PATH_AFFIX => array(
      'page callback' => 'serchilo_page_opensearch',
      'page arguments' => array(1, 2),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.opensearch.inc',
    ),
    SERCHILO_OPENSEARCH_DEFINITION_PATH_AFFIX . '/' . SERCHILO_USER_PATH_AFFIX . '/%' => array(
      'page callback' => 'serchilo_page_opensearch',
      'page arguments' => array(1, 2),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.opensearch.inc',
    ),

    'user/edit' => array(
      'page callback' => 'serchilo_page_user_edit',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.user.inc',
    ),

    'user/shortcuts' => array(
      'title' => 'My shortcuts',
      'page callback' => 'serchilo_page_user_shortcuts',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_LOCAL_TASK,
      'file' => 'serchilo.pages.user.inc',
    ),

    // Change console namespaces

    SERCHILO_NAMESPACES_PATH_AFFIX . '/%/edit' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('serchilo_form_console_namespaces', 1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.edit.inc',
      'title' => 'Change namespaces',
    ),

    // Shortcut 'changed' view

    'shortcuts/%/changed' => array(
      'page callback' => 'serchilo_page_shortcut_changed',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
      'file' => 'serchilo.pages.shortcut.inc',
    ),

    // Redirect broken Shortcut URLs

    'shortcuts/%' => array(
      'page callback' => 'serchilo_redirect_shortcuts',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.redirect.inc',
    ),

    'node/%node/approve' => array(
      'title' => 'Approve',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('serchilo_shortcut_approve_confirm', 1),
      'access callback' => 'serchilo_shortcut_approve_access',
      'access arguments' => array(1),
      'weight' => 10,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'serchilo.pages.shortcut.inc',
    ),

    'node/%node/discussion' => array(
      'title' => 'Discussion',
      'page callback' => 'serchilo_page_shortcut_discussion',
      'page arguments' => array(1),
      'access callback' => 'serchilo_shortcut_discussion_access',
      'access arguments' => array(1),
      'weight' => 11,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'serchilo.pages.shortcut.inc',
    ),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function serchilo_menu_alter(&$items) {

  // Rename user edit tab.
  $items['user/%user/edit']['title'] = 'My account';

  // Redirect user page to u/[username]
  $items['user/%user']['page callback'] = 'serchilo_page_user_view';
  $items['user/%user']['file'] = 'serchilo.pages.user.inc';
  $items['user/%user']['module'] = 'serchilo';

  // Add delete tab to nodes.
  $items['node/%node/delete']['context'] = MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE;

  // Make shortcut clone link a tab.
  $items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;

  // Rename shortcut clone tab.
  $items['node/%node/clone/%clone_token']['title'] = 'Clone';
  $items['node/%node/clone/%clone_token']['title callback'] = '';

  // Redirect taxonomy terms to shortcuts/.
  $items['taxonomy/term/%taxonomy_term']['page callback'] = 'serchilo_redirect_taxonomy';
  $items['taxonomy/term/%taxonomy_term']['file'] = 'serchilo.pages.redirect.inc';
  $items['taxonomy/term/%taxonomy_term']['module'] = 'serchilo';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function serchilo_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // For 'shortcuts' view:
  // Insert 'Add shortcut' tabs
  if ('shortcuts' == $root_path) {

    // Add some tabs.

    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#active' => TRUE,
      '#link' => array(
        'title' => t('List'),
        'href' => 'shortcuts',
        'access' => TRUE,
        'localized_options' => array(),
      ),
    );

    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Create new shortcut'),
        'href' => 'node/add/shortcut',
        'access' => TRUE,
        'localized_options' => array(),
      ),
    );

    $data['tabs'][0]['count'] = 2;
  }
}


# ACCESS CALLBACKS

/**
 * Access callback for node/%node/approve.
 *
 * @param object $node
 *   The shortcut node.
 *
 * @return bool
 *   TRUE if access is given.
 *   FALSE if access is not given.
 */
function serchilo_shortcut_approve_access($node) {

  if ($node->type != 'shortcut') {
    return FALSE; 
  }
  if (!user_access('approve shortcut content')) {
    return FALSE; 
  }
  if (!empty($node->field_approved[LANGUAGE_NONE][0]['value'])) {
    return FALSE; 
  }
  return TRUE; 
}

/**
 * Access callback for node/%node/discussion.
 *
 * @param object $node
 *   The shortcut node.
 *
 * @return bool
 *   TRUE if access is given.
 *   FALSE if access is not given.
 */
function serchilo_shortcut_discussion_access($node) {

  if ($node->type != 'shortcut') {
    return FALSE; 
  }
  return TRUE; 
}


// THEME HOOKS 

/**
 * Implements hook_theme().
 */
function serchilo_theme($existing, $type, $theme, $path) {

  $themes = array(
    'serchilo_console' => array(
      'template' => 'serchilo-console', 
      'variables' => array('query' => null), 
      'path' => drupal_get_path('module', 'serchilo') . '/templates',
    ),
    'serchilo_opensearch' => array(
      'template' => 'serchilo-opensearch', 
      'variables' => array('content' => null), 
      'path' => drupal_get_path('module', 'serchilo') . '/templates',
    ),
    'serchilo_shortcut_example_link' => array(
    ),
  );

  return $themes;
}

/**
 * Implements hook_field_formatter_info().
 */
function serchilo_field_formatter_info() {
  return array(
    'serchilo_shortcut_example_link_formatter' => array(
      'label' => t('Shortcut example link'),
      'field types' => array('text'), 
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function serchilo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $type = drupal_array_get_nested_value($instance, array('display', 'default', 'type'));

  switch ($type) {
  case 'serchilo_shortcut_example_link_formatter':
    $element[0] = theme(
      'serchilo_shortcut_example_link',
      array(
        'shortcut' => $entity->hostEntity(),
        'arguments' => ((count($items) > 0) ? $items[0]['value'] : '')
      )
    );
    break; 
  }
  return $element;
}

/**
 * Return the render array for a shortcut example query link.
 *
 * @param array $variables
 *   Theme variables, with keys:
 *     - with_namespace
 *       True when the link text shall contain the namespace name.
 *     - Either
 *       - shortcut
 *         The shortcut node object.
 *       - arguments
 *         The arguments array for the query.
 *     - Or
 *       - query
 *         The whole query.
 *
 * @return void
 */
function theme_serchilo_shortcut_example_link($variables) {

  $arguments_str = '';
  if (!empty($variables['arguments'])) {
    if (is_array($variables['arguments'])) {
      $arguments_str = join(', ', $variables['arguments']); 
    }
    elseif (is_string($variables['arguments'])) {
      $arguments_str = $variables['arguments']; 
    }
  }
  
  if (!empty($variables['shortcut'])) {
    $namespace_name = taxonomy_term_load($variables['shortcut']->field_namespace[LANGUAGE_NONE][0]['tid'])->name;
    $query = 
      $variables['shortcut']->field_keyword[LANGUAGE_NONE][0]['value'] . 
      ' ' . 
      $arguments_str;

    // Trim query, useful when arguments are empty.
    $query = trim($query);

    $text = $query;

    if (!empty($variables['with_namespace'])) {
      $text = $namespace_name .  '.' .  $text;
    }
    // The query gets always the namespace name prefixed.
    $query = $namespace_name .  '.' .  $query;

  } else {
    $query = $variables['query'];
    $text = $query;
  }

  $link = array(
    '#type' => 'link',
    '#title' => $text,
    '#href' => '',
    '#options' => array(
      'attributes' => array(
        'rel' => 'nofollow',
        'class' => array('query'),
      ),
      'query' => array(
        'query' => $query,
      ), 
    ),
  );

  return $link;
}


// VIEWS HOOKS

/**
 * Implements hook_views_pre_render().
 */
function serchilo_views_pre_render(&$view) {

  // Only for Serchilo views.
  if (in_array($view->name, array('shortcuts', 'namespaces', 'namespace-types', 'tags'))) {

    // Wrap filters into a collapsible panel.

    // Start opened when already some filters set.
    $default_open = serchilo_views_is_filter_used($view->filter);

    // TODO: Put this into a template.
    $view->exposed_widgets = '

   <div class="panel panel-default">
      <div class="panel-heading" onclick="(function($){ $(\'#collapseFilter\').collapse(\'toggle\'); }(jQuery)) ">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseFilter">
            Filter
          </a>
        </h4>
      </div>
      <div id="collapseFilter" class="panel-collapse collapse ' . ($default_open ? 'in' : '' ) .  '">
        <div class="panel-body">
  ' . $view->exposed_widgets . '
        </div>
      </div>
    </div>
      ';
  }
}

/**
 * Checks if a view uses filters.
 *
 * @param array $filter
 *   The $view->filter array.
 *
 * @return boolean
 *   True if filters are used.
 */
function serchilo_views_is_filter_used($filters) {

  foreach ($filters as $filter) {
    if (!empty($filter->value)) {
      return TRUE; 
    }
  }
  return FALSE; 
}


// BLOCK HOOKS

/**
 * Implements hook_block_info().
 */
function serchilo_block_info() {

  $blocks = array();

  $blocks['namespaces'] = array(
    'info' => 'Namespaces',
    'status' => 1,
    'region' => 'header',
  );

  $blocks['licenses'] = array(
    'info' => 'Licenses',
    'status' => 1,
    'region' => 'footer',
  );

  $blocks['add_to_browser'] = array(
    'info' => 'Add to browser',
    'status' => 1,
    'region' => 'footer',
    // Show only on n/* and u/* pages.
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "n/*\nu/*"
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function serchilo_block_view($delta='') {

  $block = array();

  switch ($delta) {
    case 'namespaces':
      $block['subject'] = NULL;
      $block['content'] = serchilo_block_namespaces();
      break;
    case 'licenses':
      $block['subject'] = NULL;
      $block['content'] = serchilo_block_licenses();
      break;
    case 'add_to_browser':
      $block['subject'] = NULL;
      $block['content'] = serchilo_block_add_to_browser();
      break;
  }

  return $block;
}

/**
 * Display current namespaces.
 */
function serchilo_block_namespaces() {

  $namespaces      = drupal_static('serchilo_namespaces');
  $namespace_names = drupal_static('serchilo_namespace_names');

  // Get out if no namespaces are set.
  if (count($namespaces) == 0) {
    return;
  }

  $title = array(
    '#type' => 'link',
    '#title' => 'Namespaces:',
    '#href' => 'help/namespaces',
    '#attributes' => array(
      'class' => array(
      ),
    ),
  );

  // Create links for all namespaces.
  $namespace_links = array();
  foreach ($namespaces as $namespace) {
    $uri = entity_uri('taxonomy_term', $namespace);
    $namespace_links[] = array(
      '#type' => 'link',
      '#title' => $namespace->name,
      '#href' => $uri['path'],
      '#options' => $uri['options'],
      '#attributes' => array(
        'class' => array('namespace'),
        'title' => $namespace->description,
      ),
    );

  }

  // Create edit link if namespaces are editable.
  if (SERCHILO_NAMESPACES_PATH_AFFIX == arg(0)) {
    $link_path = SERCHILO_NAMESPACES_PATH_AFFIX . '/' . arg(1) . '/edit';
  }
  else if (user_is_logged_in()) {
    $uri = entity_uri('user', $GLOBALS['user']);
    $link_path = $uri['path'] . '/edit';
  }

  if (isset($link_path)) {
    $edit_link = array(
      '#type' => 'link',
      '#title' => 'Change',
      '#href' => $link_path,
      '#attributes' => array(
        'class' => array(
          'btn', 
          'btn-sm', 
          'btn-default'
        ),
      ),
    );
  }
  else {
    $edit_link = array();
  }
 
  $list_shortcuts_link = array(
    '#type' => 'link',
    '#title' => 'List shortcuts',
    '#href' => 'shortcuts',
    '#options' => array(
      'query' => array(
        'namespace' => join(',', $namespace_names), 
      ),
    ),
    '#attributes' => array(
      'class' => array(
        'btn', 
        'btn-sm', 
        'btn-default'
      ),
    ),
  );

  return array_merge(
    array($title),
    $namespace_links,
    array($edit_link),
    array($list_shortcuts_link)
  );
}

/**
 * Display licenses.
 */
function serchilo_block_licenses() {

  $dir = drupal_get_path('module', 'serchilo');

  // TODO: Solve this with theme('image'..);
  return '
    <a href="https://github.com/georgjaehnig/serchilo-drupal">
    <img src="/' . $dir . '/svg/agpl-v3.svg" width="72" height="30" />
    </a>
    <a href="/export">
    <img src="/' . $dir . '/svg/cc-by-sa.svg" width="80" height="15" />
    </a>
    ';
}

/**
 * Display licenses.
 */
function serchilo_block_add_to_browser() {

  return '
      <button class="btn btn-sm btn-default" onclick="window.external.AddSearchProvider( \'http://\' + location.host + \'/opensearch\' + location.pathname + location.search);">Add to browser</button>
    ';
}


// NODE HOOKS

/**
 * Implements hook_node_presave().
 */
function serchilo_node_presave($node) {

  if ($node->type == 'shortcut') {

    // Make sure language is undefined.
    // (Weirdly, there seems to be no option to set this in the Frontend.)
    $node->language = LANGUAGE_NONE;

    $wnode = entity_metadata_wrapper('node', $node);

    // If a user shortcut:
    // Set its user as the owner.
    if ($wnode->field_namespace->field_namespace_type->name->value() == 'user') {
      $user_name = $wnode->field_namespace->name->value();
      // If found an account
      if ($account = user_load_by_name($user_name)) {
        $node->uid = $account->uid;
      }
      else {
        $node->uid = 1;
      }
    }
    // If a site shortcut:
    // Set admin as the owner.
    else {
      $node->uid = 1;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function serchilo_node_insert($node) {

  if ($node->type == 'shortcut') {
    if (!empty($node->field_approved[LANGUAGE_NONE][0]['value'])) {
      module_load_include('inc', 'serchilo', 'serchilo.sync');
      $num_affected = serchilo_insert_shortcut_row($node);
      serchilo_watchdog_check_number_of_affected_rows($num_affected, $node, __FUNCTION__);
    }
  }
  if (module_exists('boost')) {
    boost_flush_caches();
  }
}

/**
 * Implements hook_node_update().
 */
function serchilo_node_update($node) {

  if ($node->type == 'shortcut') {
    // Check if this is a "real" update call
    // or just one caused by the bug in
    // https://www.drupal.org/node/2385985
    if (!empty($node->revision)) {
      if (!empty($node->field_approved[LANGUAGE_NONE][0]['value'])) {
        module_load_include('inc', 'serchilo', 'serchilo.sync');
        $num_affected = serchilo_insert_or_update_shortcut_row($node);
        serchilo_watchdog_check_number_of_affected_rows($num_affected, $node, __FUNCTION__);
      }
    }
  }
  if (module_exists('boost')) {
    boost_flush_caches();
  }
}

/**
 * Implements hook_node_delete().
 */
function serchilo_node_delete($node) {

  if ($node->type == 'shortcut') {
    module_load_include('inc', 'serchilo', 'serchilo.sync');
    $num_affected = serchilo_delete_shortcut_row($node);
    serchilo_watchdog_check_number_of_affected_rows($num_affected, $node, __FUNCTION__);
  }
  if (module_exists('boost')) {
    boost_flush_caches();
  }
}


/**
 * Check the number of affected rows.
 * 
 * @param int $num_affected
 *   Number of affected rows.
 * @param object $node
 *   The node object that was dealt with.
 * @param string $function_name
 *   The name of the calling function.
 * 
 * @return void
 */
function serchilo_watchdog_check_number_of_affected_rows($num_affected, $node, $function_name) {

  if ($num_affected == 0) {
    watchdog(
      'serchilo', 
      'Wrong number of affected rows in %function: %num_affected rows when processing node %nid',
      array(
        '%function'     => $function_name, 
        '%num_affected' => $num_affected,
        '%nid'          => $node->nid,
      ),
      WATCHDOG_ERROR
    );
  }
}

/**
 * Set the shortcut's argument data, parsed from the url,
 * i.e.
 * - the argument_names
 * - the argument count
 *
 * @param object &$node
 *   The shortcut node as a reference
 *
 * @return void
 */
function serchilo_set_shortcut_arguments_data(&$node) {

  // derive and set url metadata
  $argument_names = serchilo_get_argument_names(
    drupal_array_get_nested_value($node->field_url,             array(LANGUAGE_NONE, 0, 'value')),
    drupal_array_get_nested_value($node->field_post_parameters, array(LANGUAGE_NONE, 0, 'value'))
  );
  drupal_array_set_nested_value($node->field_argument_names, array(LANGUAGE_NONE, 0, 'value'), join(', ', $argument_names));
  drupal_array_set_nested_value($node->field_argument_count, array(LANGUAGE_NONE, 0, 'value'), count($argument_names));
}


/**
 * Implements hook_node_access().
 */
function serchilo_node_access($node, $op, $account) {

  if (node_type_get_type($node)->type == 'shortcut') {
    if ($op == 'update') {
        
      $wnode = entity_metadata_wrapper('node', $node);

      // Allow if a site namespace.
      if ('user' != $wnode->field_namespace->field_namespace_type->name->value()) {
        return NODE_ACCESS_ALLOW;
      }

      // Allow if a user namespace and owning user is logged in.
      if (
        (user_is_logged_in()) &&
        ($wnode->field_namespace->name->value() == $account->name) &&
        TRUE
      ) {
        return NODE_ACCESS_ALLOW;
      }

      // Deny in all other cases.
      return NODE_ACCESS_DENY;
    }
  }
}

/**
 * Implements hook_node_view().
 */
function serchilo_node_view($node, $view_mode, $langcode) {

  if ('shortcut' == $node->type) {

    if (empty($node->field_approved[LANGUAGE_NONE][0]['value'])) {
      drupal_set_message(
        t(
          'This shortcut revision has not yet been approved, so it cannot be called. See the !editing_policy for more information.', 
          array(
            '!editing_policy' => l(t('Editing Policy'), 'help/editing') 
          )
        ),
        'warning'
      );
    }
    else {
      $node->content['shortcut_call_form'] = drupal_get_form('serchilo_shortcut_call_form', $node);
    }
  }
}


// FORM HOOKS

// Shortcut call form

/**
 * Builds a form for calling a shortcut.
 *
 * @param array $form
 * @param array $form_state
 *   Standard form hook arguments.
 *
 * @param object $node
 *   The node of type shortcut
 *   to build the from.
 *
 * @return array $form
 *   The built form.
 */
function serchilo_shortcut_call_form($form, $form_state, $node) {

  $form = array();

  $form['#attributes']['class'] = array('form-inline'); 
  $form['#attributes']['role'] = 'form'; 

  $form['keyword'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#value' => 
      #render($node->field_namespace ) .
      #$namespace_html .
      #'.' .
      $node->field_keyword[LANGUAGE_NONE][0]['value'],
    '#attributes' => array(
      'class' => array('keyword', 'form-group'), 
    ),
  );

  $form['arguments']['#tree'] = true;

  if (!empty($node->field_argument_names[LANGUAGE_NONE][0]['value'])) {
    $argument_names = explode(',', $node->field_argument_names[LANGUAGE_NONE][0]['value']);
  }
  else {
    $argument_names = array();
  }
  for ($i=0; $i<count($argument_names); $i++) {
    $argument_name = $argument_names[$i];

    #$argument_example = (array_key_exists($i, $argument_examples) ? $argument_examples[$i] : '');
    $form['arguments'][$i] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#size' => 0,
      '#attributes' => array(
        'placeholder' => $argument_name,
      ), 
    );
  }

  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );

  // TODO: This should rather be in the theme,
  // but weirdly, in hook_preprocess_form() it is too late
  // for the JS to get recognized and attached.
  $form['#attached']['js'][] = drupal_get_path('module', 'serchilo') . '/js/shortcut-call-form.js';

  return $form;
}

/**
 * Implements hook_FORM_ID_form_submit().
 *
 * Builds a query out of the shortcut form arguments
 * and redirects it to the query handler.
 *
 * @param array $form
 * @param array $form_state
 *   Standard form hook arguments.
 *
 * @return void
 */
function serchilo_shortcut_call_form_submit($form, &$form_state) {

  if (user_is_logged_in()) {
    // Logged users call their user path.
    global $user; 
    $path = 'u/' . $user->name;
  } else {
    // Anonymous user get the default language and country namespace.
    $path = 'n/' .
      serchilo_get_default_language_namespace()->name .
      '.' .
      serchilo_get_default_country_namespace()->name .
      '';
  }
  $url = url(
    $path,
    array(
      'query' => array(
        'query' => 
        // Force namespace of current shortcut
        $form_state['values']['node']->field_namespace[LANGUAGE_NONE][0]['taxonomy_term']->name .
        '.' . 
        // Prepend keyword
        $form_state['values']['node']->field_keyword[LANGUAGE_NONE][0]['value'] .
        ' ' .
        // Add submitted arguments
        join(',', drupal_array_get_nested_value($form_state, array('values','arguments')) ?: array())
        
      ) 
    ) 
  );
  global $base_url;
  $url = $base_url . $url;
  drupal_goto($url);
}


// Shortcut node (edit) form

/**
 * Implements hook_clone_node_alter().
 */
function serchilo_clone_node_alter(&$node, $context) {

  // Set stats fields to 0.
  $node->field_calls_last_30_days[LANGUAGE_NONE][0]['value'] = 0;
  $node->field_calls_total       [LANGUAGE_NONE][0]['value'] = 0;
  $node->field_weight            [LANGUAGE_NONE][0]['value'] = 0;
}

/**
 * Implements hook_form_alter().
 */
function serchilo_form_shortcut_node_form_alter(&$form, &$form_state, $form_id) {

  global $user;

  // If creating a new Shortcut:
  if (empty($form['nid']['#value'])) {
    if (user_is_logged_in()) {
      // Add link to set user namespace.
      $form['field_namespace']['#attached']['js'][] = array(
        'data' => 'jQuery(document).ready(function () { 
          var link = jQuery("<a>Set my user namespace</a>");
          link.click(function() {
            jQuery("#edit-field-namespace-und").val("' . $user->name .  '");
          });
          jQuery(".form-item-field-namespace-und").append(link);
        });', 
        'type' => 'inline',
      );
    }
    if (!empty($_GET['namespace'])) {
      $form['field_namespace'][LANGUAGE_NONE]['#default_value'] = $_GET['namespace'];
    }
    if (!empty($_GET['title'])) {
      $form['title']['#default_value'] = $_GET['title'];
    }
    if (!empty($_GET['keyword'])) {
      $form['field_keyword'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['keyword'];
    }
    if (!empty($_GET['url'])) {
      $form['field_url'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['url'];
    }
  }

  $form['title']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_keyword'][LANGUAGE_NONE][0]['value']['#element_validate'] = array(
    'serchilo_form_validate_no_tags',
    'serchilo_form_validate_no_dots',
    'serchilo_form_validate_no_whitespace',
    'serchilo_form_validate_lowercase',
  );
  $form['field_argument_names'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_url'           ][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_namespace'     ][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_namespace');
  foreach (element_children($form['field_example'][LANGUAGE_NONE]) as $index) {
    if (is_int($index)) {
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_arguments  '][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_description'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
    }
  }
}

/**
 * Validate a form element that should contain no HTML tags.
 */
function serchilo_form_validate_no_tags($element, &$form_state) {
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != preg_replace('/<.*>/', '', $value)) {
    form_error(
      $element, 
      t(
        '@title must not contain HTML tags.', 
        array(
          '@title' => $element['#title'], 
        )
      )
    );
  }
}

/**
 * Validate a form element that should contain no dots.
 */
function serchilo_form_validate_no_dots($element, &$form_state) {
  $value = drupal_array_get_nested_value( $form_state['values'], $element['#parents']);
  if (strpos($value, '.') !== FALSE) {
    form_error(
      $element,
      t(
        'No dots are allowed in the keyword, since !dots_are used_for_forcing_a_namespace.',
        array(
          '!dots_are used_for_forcing_a_namespace' => l(t('dots are used for forcing a namespace'), 'help/namespaces', array('fragment'=>'force')) 
        )
      )
    );
  }
}

/**
 * Validate a form element that should contain no whitespace.
 */
function serchilo_form_validate_no_whitespace($element, &$form_state) {

  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != preg_replace('/\s*/', '', $value)) {
    form_error(
      $element, 
      t(
        '@title must not contain spaces.', 
        array(
          '@title' => $element['#title'], 
        )
      )
    );
  }
}

/**
 * Validate a form element that must be lowercase.
 */
function serchilo_form_validate_lowercase($element, &$form_state) {

  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != strtolower($value)) {
    form_error(
      $element, 
      t(
        '@title must be lowercase.', 
        array(
          '@title' => $element['#title'], 
        )
      )
    );
  }
}

/**
 * Validate namespace.
 */
function serchilo_form_validate_namespace($element, &$form_state) {

  if (!user_permission('edit any shortcut content')) {
    return TRUE;
  }

  global $user;
  $namespace_name = drupal_array_get_nested_value($form_state['values'], array_slice($element['#parents'], 0, 2));
  $namespace = current(taxonomy_get_term_by_name($namespace_name, 'namespaces'));
  $wnamespace = entity_metadata_wrapper('taxonomy_term', $namespace);

  // If this is a user namespace.
  if ($wnamespace->field_namespace_type->name->value() == 'user') {
    if (user_is_logged_in()) {
      if ($namespace_name != $user->name) {
        form_error( $element, t('Namespace must be a site namespace or your user namespace.'));
      }
    } else {
      form_error( $element, t('Namespace must be a site namespace.'));
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function serchilo_node_validate($node, $form, &$form_state) {

  // Don't continue if there are already errors.
  if (form_get_errors()) {
    return; 
  }

  if ($node->type == 'shortcut') {

    // Check if another shortcut with the same
    // keyword, argument_count and namespace exists.

    serchilo_set_shortcut_arguments_data($node);

    $efq = new EntityFieldQuery;

    $efq = $efq
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'shortcut')
      ->fieldCondition('field_keyword',        'value',  $node->field_keyword[LANGUAGE_NONE][0]['value'])
      ->fieldCondition('field_argument_count', 'value',  $node->field_argument_count[LANGUAGE_NONE][0]['value'])
      ->fieldCondition('field_namespace',      'tid',    $node->field_namespace[LANGUAGE_NONE][0]['tid']);

    // Exclude the current shortcut.
    if (!empty($node->nid)) {
      $efq->propertyCondition('nid', $node->nid, '!=');
    }

    $result = $efq->execute();

    // If found a colliding shortcut:
    if (!empty($result)) {
      $existing_shortcut_nid = array_keys($result['node'])[0];
      $existing_shortcut = node_load($existing_shortcut_nid);
      form_set_error(
        'field_keyword',
        format_plural(
          $existing_shortcut->field_argument_count[LANGUAGE_NONE][0]['value'],
          'The shortcut !title is already using the keyword %keyword and %argument_count argument.',
          'The shortcut !title is already using the keyword %keyword and %argument_count arguments.',
          array(
            '!title' => l($existing_shortcut->title, 'node/' . $existing_shortcut->nid),
            '%keyword' => $existing_shortcut->field_keyword[LANGUAGE_NONE][0]['value'],
            '%argument_count' => $existing_shortcut->field_argument_count[LANGUAGE_NONE][0]['value'],
          )
        )
      );
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function serchilo_node_submit($node, $form, &$form_state) {

  if ($node->type == 'shortcut') {

    serchilo_set_shortcut_arguments_data($node);
    $is_sensible_edit = serchilo_is_sensible_edit($node);
    $node->field_approved[LANGUAGE_NONE][0]['value'] = (int) !$is_sensible_edit;
  }
}


// Discussion node (edit) form

/**
 * Implements hook_form_alter().
 */
function serchilo_form_discussion_node_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($_GET['shortcut_affected'])) {
    $shortcut = node_load($_GET['shortcut_affected']);
    $form['field_shortcuts_affected'][LANGUAGE_NONE][0]['target_id']['#default_value'] = "$shortcut->title ($shortcut->nid)";
  }
}


// User register form

/**
 * Implements hook_form_FORM_ID_alter().
 */
function serchilo_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['field_language_namespace']['#access'] = FALSE;
  $form['field_country_namespace']['#access'] = FALSE;
  $form['#validate'][] = 'serchilo_form_user_register_form_validate';
}

/**
 * Validate user registration.
 */
function serchilo_form_user_register_form_validate($form, &$form_state) {

  // Lowercase the username.
  $form_state['values']['name'] = strtolower($form_state['values']['name']);
  
  // Extract the submitted name.
  $name = $form_state['values']['name'];

  // Make sure length is >=4.
  // Shorter lengths are reserved for site namespaces like language and country 
  // namespaces.
  if (strlen($name) < 4) {
    form_set_error('name', t('The username must contain at least 4 characters.'));
  }

  // Exclude dots and dashes.
  // (Names will be namespaces, dots are used to separate namespaces. And for 
  // dashes I forgot the reason. :-/ )
  if (
    (strpos($name, ' ') !== false) ||
    (strpos($name, '.') !== false) ||
    (strpos($name, '-') !== false) 
  ) {
    form_set_error('name', t('The username must not contain ".", "-" or spaces.'));
  }

  // Disallow user names that collide with existing paths.
  if (in_array($name, array('login', 'autocomplete', 'login', 'register', 'password', 'reset', 'logout'))) {
    form_set_error('name', t('This username is not allowed.'));
  }
}

/**
 * Implements hook_user_presave().
 */
function serchilo_user_presave(&$edit, $account, $category) {
  // set default language and country namespace if necessary
  if (empty($edit['field_language_namespace'][LANGUAGE_NONE])) {
     $edit['field_language_namespace'][LANGUAGE_NONE][0] = (array) serchilo_get_default_language_namespace();
  }
  if (empty($edit['field_country_namespace'][LANGUAGE_NONE])) {
     $edit['field_country_namespace'][LANGUAGE_NONE][0] = (array) serchilo_get_default_country_namespace();
  }
  // create user namespace if necessary
  $term['field_namespace_type'][LANGUAGE_NONE][0] = (array) serchilo_taxonomy_ensure_term('user', 'namespace_types');
  serchilo_taxonomy_ensure_term($edit['name'], 'namespaces', $term);
}


// Options list for namespaces

/**
 * Creates an options list of namespaces of a given namespace_type.
 *
 * @param string $namespace_type
 *   The namespace type, e.g. 'language' or 'country'.
 *
 * @return array $options
 *   The generated options list.
 */
function serchilo_options_list_namespace_by_type($namespace_type) {

  $namespace_type_id = key(taxonomy_get_term_by_name($namespace_type, 'namespace_types'));

  $efq = new EntityFieldQuery;

  $result = $efq
    ->entityCondition('entity_type', 'taxonomy_term')
    ->fieldCondition('field_namespace_type', 'tid',  $namespace_type_id)
    ->propertyOrderBy('description')
    ->execute();

  $namespace_ids = array_keys(array_shift($result));
  $namespaces = taxonomy_term_load_multiple($namespace_ids);

  $options = array();
  foreach ($namespaces as $namespace) {
    $options[$namespace->tid] = $namespace->description . ' (' . $namespace->name . ')';
  }
  return $options;
}

/**
 * Custom options list callback.
 */
function serchilo_options_list_language_namespace() {
  return serchilo_options_list_namespace_by_type('language');
}

/**
 * Custom options list callback.
 */
function serchilo_options_list_country_namespace() {
  return serchilo_options_list_namespace_by_type('country');
}


// SHORTCUT HELPERS

/**
 * Get the Serchilo argument names from the placeholders in URL.
 *
 * @param string $url
 *   The URL containing placeholders.
 * @param string $post_parameters
 *   The POST parameter string containing placeholders.
 *
 * @return array $argument_names
 *   The extracted argument names.
 */
function serchilo_get_argument_names($url, $post_parameters) {

  $argument_names = array_merge(
    serchilo_get_argument_names_from_string($post_parameters),
    serchilo_get_argument_names_from_string($url)
  );

  // treat arguments with same name as only one argument
  $argument_names = array_unique($argument_names);

  // make sure indexes have no gaps
  $argument_names = array_values($argument_names);

  return $argument_names;
}

/**
 * Get the Serchilo argument names from a string.
 *
 * @param string $str
 *   The string containing placeholders.
 *
 * @return array $argument_names
 *   The extracted argument names.
 */
function serchilo_get_argument_names_from_string($str) {

  preg_match_all(
    // ? makes ungreedy
    '/\{s:(.+?)\}/',
    $str,
    $matches,
    PREG_PATTERN_ORDER
  );

  return $matches[1];
}

/**
 * Check if shortcut edit is sensible edit.
 *
 * @param $node
 *   Node of type shortcut.
 * @return 
 *   TRUE if edit is sensible.
 */
function serchilo_is_sensible_edit($node) {

  global $user;

  // Should only be called for shortcuts anyway.
  // But better return TRUE in error case
  // because a wrong TRUE probably causes less harm
  // than a wrong FALSE in this context.
  if ($node->type != 'shortcut') {
    return TRUE;
  }

  // Allow users with approve permission to do anything.
  if (user_access('approve shortcut content')) {
    return FALSE;
  }

  // Default is TRUE.
  $is_sensible_edit = TRUE;

  // Non-new shortcuts:
  if (!empty($node->nid)) {
    $original_node = node_load($node->nid);
    $is_sensible_edit = (
      (
        // change in keyword
        drupal_array_get_nested_value($original_node->field_keyword, array(LANGUAGE_NONE, 0, 'value')) 
        != drupal_array_get_nested_value($node->field_keyword, array(LANGUAGE_NONE, 0, 'value'))
      ) 
      ||
      (
        // change in url
        drupal_array_get_nested_value($original_node->field_url, array(LANGUAGE_NONE, 0, 'value')) 
        != drupal_array_get_nested_value($node->field_url, array(LANGUAGE_NONE, 0, 'value'))
      ) 
      ||
      (
        // change in namespace
        drupal_array_get_nested_value($original_node->field_namespace, array(LANGUAGE_NONE, 0, 'tid')) 
        != drupal_array_get_nested_value($node->field_namespace, array(LANGUAGE_NONE, 0, 'tid'))
      ) 
    );
  }

  // New shortcuts:
  else {

    // Allow adding a shortcut to SERCHILO_PLANET_NAMESPACE 
    // if the keyword is new in SERCHILO_PLANET_NAMESPACE.
    if (serchilo_keyword_is_new_in_planet_namespace($node)) {
      $is_sensible_edit = FALSE;
      return $is_sensible_edit;
    }

    // Allow adding a shortcut to any site namespace 
    // if the keyword is new to any namespace.
    if (serchilo_keyword_is_new($node)) {
      $is_sensible_edit = FALSE;
      return $is_sensible_edit;
    }

    // Every other new shortcut is sensible.
    $is_sensible_edit = TRUE;
  }

  // If the user is logged in and the shortcut is saved to the current user's namespace,
  // it is not sensible, since users can do anything in their own namespaces.
  if (user_is_logged_in()) {
    // Check on the namespace which was set BEFORE the edit
    // (if available).
    if (isset($original_node)) {
      $is_sensible_edit = ($user->name != drupal_array_get_nested_value($original_node->field_namespace, array(LANGUAGE_NONE, 0, 'name')));
    }
    else {
      $is_sensible_edit = ($user->name != drupal_array_get_nested_value($node->field_namespace, array(LANGUAGE_NONE, 0, 'name')));
    }
  }

  return $is_sensible_edit;
}

/**
 * Check if the keyword of the given shortcut
 * is new in SERCHILO_PLANET_NAMESPACE
 * (but may be used in another namespace).
 *
 * @param $node
 *   Node of type shortcut.
 * @return 
 *   TRUE if the keyword is not used in SERCHILO_PLANET_NAMESPACE.
 */
function serchilo_keyword_is_new_in_planet_namespace($node) {

  // Check first is we want to add to SERCHILO_PLANET_NAMESPACE at all.
  if (SERCHILO_PLANET_NAMESPACE != drupal_array_get_nested_value($node->field_namespace, array(LANGUAGE_NONE, 0, 'name'))) {
    return FALSE;
  }
  // Check if there is already a shortcut 
  $efq = new EntityFieldQuery;
  $result = $efq
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'shortcut')
    ->fieldCondition('field_keyword',        'value',  $node->field_keyword[LANGUAGE_NONE][0]['value'])
    ->fieldCondition('field_namespace',      'tid',    $node->field_namespace[LANGUAGE_NONE][0]['tid'])
    ->execute();

  if (count($result) == 0) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Check if the keyword of the given shortcut
 * is new in site namespaces
 * (but may be used in user namespaces).
 *
 * @param $node
 *   Node of type shortcut.
 * @return 
 *   TRUE if the keyword is not used in site namespaces.
 */
function serchilo_keyword_is_new($node) {

  // Check first is we want to add to a site namespace (=not a user namespace) at all.
  $namespace_type_id = drupal_array_get_nested_value(
    $node->field_namespace, 
    array(LANGUAGE_NONE, 0, 'field_namespace_type', LANGUAGE_NONE, 0, 'tid')
  );
  $namespace_type = taxonomy_term_load($namespace_type_id);
  if ('user' == $namespace_type->name) {
    return FALSE;
  }

  // Check if there is already a shortcut 
  $efq = new EntityFieldQuery;
  $result = $efq
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'shortcut')
    ->fieldCondition('field_keyword', 'value',  $node->field_keyword[LANGUAGE_NONE][0]['value'])
    ->execute();

  if (count($result) == 0) {
    return TRUE;
  }

  return FALSE;
}


// OPENSEARCH HELPERS

/**
 * Return the title for the Opensearch head link.
 *
 * @param $namespaces_path
 *    String of namespaces seperated by SERCHILO_NAMESPACE_PATH_SEPARATOR.
 * @param $default_keyword
 *    (optional) String of the default keyword.
 * @return $title
 *    String of the Opensearch head link.
 */
function serchilo_opensearch_title($namespaces_path, $default_keyword = NULL) {
  if( $default_keyword ) {
    $title =  'Serchilo: ' . $namespaces_path . ' | ' . $default_keyword;
  }
  else {
    $title =  'Serchilo: ' . $namespaces_path;
  }
  return $title;
}


// DISPATCH HELPERS

/**
 * Loads default language namespace.
 *
 * @return $language_namespace 
 *   A Taxonomy term object.
 */
function serchilo_get_default_language_namespace() {
  global $language;

  $default_language = $language->language;
  $language_namespace = current(taxonomy_get_term_by_name($default_language, 'namespaces')); 

  return $language_namespace;
}

/**
 * Loads default country namespace.
 *
 * @return $language_namespace 
 *   A Taxonomy term object.
 */
function serchilo_get_default_country_namespace() {

  $ip_address = ip_address();

  $default_country_namespace_name = @geoip_country_code3_by_name($ip_address);
  $default_country_namespace_name = strtolower($default_country_namespace_name);

  // If no country namespace found: use default.
  if (
    (!$default_country_namespace_name) ||
    (strlen($default_country_namespace_name) != 3 )
  ) {
    $default_country_namespace_name  = SERCHILO_DEFAULT_COUNTRY;
  }

  $default_country_namespace = current(taxonomy_get_term_by_name($default_country_namespace_name, 'namespaces')); 

  return $default_country_namespace;
}


// TAXONOMY HELPERS

/**
 * Loads a taxonomy term, and creates it if not yet existing.
 *
 * @param string $term_name
 *   The name of the term to load.
 * @param string $vocabulary_name
 *   The name of the vocabulary the term is in.
 * @param array $term
 *   (optional) Additional settings of the term to be created.
 *   Basic (overwritable) settings are:
 *   - name:   from $term_name
 *   - vid:    from $vocabulary->vid, loaded by $vocabulary_name
 *   - format: plain_text
 *
 * @return object $term 
 *   The loaded or created taxonomy term.
 */
function serchilo_taxonomy_ensure_term($term_name, $vocabulary_name, $term = array()) {

  $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  # if namespace_type does not exist yet:
  # create it
  if(empty($term_list)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $term = array(
      'name' => $term_name,
      'vid' => (int) $vocabulary->vid,
      'format' => 'plain_text',
      'vocabulary_machine_name' => $vocabulary_name,
    ) + $term;
    $term = (object) $term;
    taxonomy_term_save($term);
    $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  }
  # get first element, the only one
  $term = array_shift($term_list);
  return $term;
}

