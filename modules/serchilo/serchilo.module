<?php

require_once('serchilo.constants.inc');
require_once('serchilo.shared.inc');

// MENU 

/**
 * Implements hook_menu().
 */
function serchilo_menu() {

  $items = array(

    'node' => array(
      'page callback' => 'serchilo_page_home',
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

    SERCHILO_NAMESPACES_PATH_AFFIX => array(
      'page callback' => 'serchilo_page_dispatch_namespaces',
      'page arguments' => array(SERCHILO_CONSOLE, 1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),
    SERCHILO_USER_PATH_AFFIX . '/%' => array(
      'page callback' => 'serchilo_page_dispatch_user',
      'page arguments' => array(SERCHILO_CONSOLE, 1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

    SERCHILO_OPENSEARCH_DEFINITION_PATH_AFFIX . '/' . SERCHILO_NAMESPACES_PATH_AFFIX => array(
      'page callback' => 'serchilo_page_opensearch',
      'page arguments' => array(1, 2),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.opensearch.inc',
    ),
    SERCHILO_OPENSEARCH_DEFINITION_PATH_AFFIX . '/' . SERCHILO_USER_PATH_AFFIX . '/%' => array(
      'page callback' => 'serchilo_page_opensearch',
      'page arguments' => array(1, 2),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.opensearch.inc',
    ),

    'user/edit' => array(
      'page callback' => 'serchilo_page_user_edit',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.user.inc',
    ),

    'user/shortcuts' => array(
      'title' => 'My shortcuts',
      'page callback' => 'serchilo_page_user_shortcuts',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_LOCAL_TASK,
      'file' => 'serchilo.pages.user.inc',
    ),

    // Change console namespaces

    SERCHILO_NAMESPACES_PATH_AFFIX . '/%/edit' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('serchilo_form_console_namespaces', 1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.edit.inc',
      'title' => 'Change namespaces',
    ),

    // Shortcut 'changed' view

    'shortcuts/%/changed' => array(
      'page callback' => 'serchilo_page_shortcut_changed',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
      'file' => 'serchilo.pages.shortcut.changed.inc',
    ),

    'shortcuts/edit' => array(
      'page callback' => 'serchilo_redirect_edit_shortcuts',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.redirect.edit.shortcuts.inc',
    ),

    // Redirect broken Shortcut URLs

    'shortcuts/%' => array(
      'page callback' => 'serchilo_redirect_shortcuts',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.redirect.inc',
    ),

    'node/%node/approve' => array(
      'title' => 'Approve',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('serchilo_shortcut_approve_confirm', 1),
      'access callback' => 'serchilo_access_shortcut_approve',
      'access arguments' => array(1),
      'weight' => 10,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'serchilo.pages.shortcut.approve.inc',
    ),

    'node/%node/discussion' => array(
      'title' => 'Discussion',
      'page callback' => 'serchilo_page_shortcut_discussion',
      'page arguments' => array(1),
      'access callback' => 'serchilo_access_shortcut_discussion',
      'access arguments' => array(1),
      'weight' => 11,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'serchilo.pages.shortcut.discussion.inc',
    ),

    'node/%node/deactivate' => array(
      'title callback' => 'serchilo_title_shortcut_deactivate',
      'title arguments' => array(1),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('serchilo_form_shortcut_deactivate', 1),
      'access callback' => 'serchilo_access_shortcut_deactivate',
      'access arguments' => array(1),
      'weight' => 12,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'serchilo.pages.shortcut.deactivate.inc',
    ),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function serchilo_menu_alter(&$items) {

  // Rename user edit tab.
  $items['user/%user/edit']['title'] = 'My account';

  // Redirect user page to u/[username]
  $items['user/%user']['page callback'] = 'serchilo_page_user_view';
  $items['user/%user']['file'] = 'serchilo.pages.user.inc';
  $items['user/%user']['module'] = 'serchilo';

  // Add delete tab to nodes.
  $items['node/%node/delete']['context'] = MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE;

  // Make shortcut clone link a tab.
  $items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;

  // Rename shortcut clone tab.
  $items['node/%node/clone/%clone_token']['title'] = 'Clone';
  $items['node/%node/clone/%clone_token']['title callback'] = '';

  // Redirect taxonomy terms to shortcuts/.
  $items['taxonomy/term/%taxonomy_term']['page callback'] = 'serchilo_redirect_taxonomy';
  $items['taxonomy/term/%taxonomy_term']['file'] = 'serchilo.pages.redirect.inc';
  $items['taxonomy/term/%taxonomy_term']['module'] = 'serchilo';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function serchilo_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // For 'shortcuts' view:
  // Insert 'Add shortcut' tabs
  if (in_array($root_path, array('shortcuts', 'new/shortcuts'))) {

    // Add some tabs.

    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#active' => TRUE,
      '#link' => array(
        'title' => t('List'),
        'href' => 'shortcuts',
        'access' => TRUE,
        'localized_options' => array(),
      ),
    );

    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Create new shortcut'),
        'href' => 'node/add/shortcut',
        'access' => TRUE,
        'localized_options' => array(),
      ),
    );

    $data['tabs'][0]['count'] = 2;
  }
}


// TITLE 

/**
 * Return title for node/%node/deactivate.
 *
 * @param object $node
 *   The shortcut node.
 *
 * @return string
 *   The title.
 */
function serchilo_title_shortcut_deactivate($node) {

  if (drupal_array_get_nested_value($node->field_active, array(LANGUAGE_NONE, 0, 'value'))) {
    return t('Deactivate'); 
  }
  else {
    return t('Activate'); 
  }
}


// ACCESS 

/**
 * Access callback for node/%node/approve.
 *
 * @param object $node
 *   The shortcut node.
 *
 * @return bool
 *   TRUE if access is given.
 *   FALSE if access is not given.
 */
function serchilo_access_shortcut_approve($node) {

  if ($node->type != 'shortcut') {
    return FALSE; 
  }
  if (!user_access('approve shortcut content')) {
    return FALSE; 
  }
  if (!empty($node->field_approved[LANGUAGE_NONE][0]['value'])) {
    return FALSE; 
  }
  return TRUE; 
}

/**
 * Access callback for node/%node/discussion.
 *
 * @param object $node
 *   The shortcut node.
 *
 * @return bool
 *   TRUE if access is given.
 *   FALSE if access is not given.
 */
function serchilo_access_shortcut_discussion($node) {

  if ($node->type != 'shortcut') {
    return FALSE; 
  }
  return TRUE; 
}

/**
 * Access callback for node/%node/deactivate.
 *
 * @param object $node
 *   The shortcut node.
 *
 * @return bool
 *   TRUE if access is given.
 *   FALSE if access is not given.
 */
function serchilo_access_shortcut_deactivate($node) {

  global $user;

  if ($node->type != 'shortcut') {
    return FALSE; 
  }

  if (user_access('deactivate any shortcut content')) {
    return TRUE; 
  }

  $wnode = entity_metadata_wrapper('node', $node);

  // If not a user namespace:
  // Everyone can deactivate.
  if ('user' != $wnode->field_namespace->field_namespace_type->name->value()) {
    return TRUE;
  }

  // If a user is on a shortcut in his own namespace
  // Can deactivate.
  if (user_is_logged_in()) {
    if ($user->name == $wnode->field_namespace->name->value()) {
      return TRUE; 
    }
  }

  return FALSE;
}


// CRON

/**
 * Implements hook_cronapi().
 */
function serchilo_cronapi($op, $job = NULL) {

  $items = array();

  $items['serchilo_export'] = array(
    'description' => 'Exports shortcuts and namespaces to the files directory.',
    'callback' => 'serchilo_export',
    // Every morning at 5:00 am.
    'rule' => '0 5 * * *', 
    'file' => 'serchilo.export.inc'
  );

  $items['serchilo_calculate_shortcut_calls'] = array(
    'description' => 'Calculate shortcut calls. Set the corresponding node fields.',
    'callback' => 'serchilo_calculate_shortcut_calls',
    // Every Monday at 4:00 am.
    'rule' => '0 4 * * 1', 
    'file' => 'serchilo.weights.inc'
  );

  $items['serchilo_calculate_shortcut_weights'] = array(
    'description' => 'Calculate shortcut weights.',
    'callback' => 'serchilo_calculate_shortcut_weights',
    // Every Monday at 4:30 am.
    'rule' => '30 4 * * 1', 
    'file' => 'serchilo.weights.inc'
  );

  return $items;
}


// STATIC CONTENT 

/**
 * Implements hook_static_content_dirs().
 */
function serchilo_static_content_dirs() {
  $dir = drupal_get_path('module', 'serchilo') . '/static_content';
  return array(
    $dir => array()
  );
}


// PERMISSION

/**
 * Implements hook_permission().
 */
function serchilo_permission() {

  $items = array();
  $items['approve shortcut content'] = array(
    'title' => t('Approve shortcuts'),
  );
  $items['deactivate any shortcut content'] = array(
    'title' => t('Deactivate any shortcuts'),
  );
  return $items;
}


// DIFF

/**
 * Implements hook_entity_diff_alter().
 */
function serchilo_entity_diff_alter(&$entity_diffs, $context) { 

  module_load_include('inc', 'serchilo', 'serchilo.diff');

  if ($context['entity_type'] = 'node') {
    if ($context['bundle'] = 'shortcut') {

      $order = array(
        'title',
        'field_keyword',
        'field_url',
        'field_namespace',
        'field_description',
        'field_example',
        'field_tags',
        'field_post_parameters',
        'field_test',
        'field_set_referrer',
        'field_invisible',
        'field_weight',
        'field_command_id',
        'field_argument_names',
        'field_argument_count',
        'field_calls_total',
        'field_calls_last_30_days',
        'field_approved',
      );
      foreach($order as $index=>&$field_name) {
        if (!empty($entity_diffs[$field_name])) {
          $entity_diffs[$field_name]['#weight'] = $index; 
        }
      }

      // Remove hidden fields from diff.
      unset($entity_diffs['field_calls_last_30_days']);
      unset($entity_diffs['field_calls_total']);
      unset($entity_diffs['field_weight']);
      foreach (array('old', 'new') as $old_new) {
        $entity_diffs['field_example']['#'.$old_new] = join("\n", serchilo_render_field_collection_revision(
          $context[$old_new.'_entity']->field_example, 
          array('field_example_arguments','field_example_description'),
          '[field_example_arguments] → [field_example_description]'
        ));
      }
      foreach (array('old', 'new') as $old_new) {
        $entity_diffs['field_test']['#'.$old_new] = join("\n", serchilo_render_field_collection_revision(
          $context[$old_new.'_entity']->field_test, 
          array('field_test_arguments','field_test_expected_content'),
          '[field_test_arguments] → [field_test_expected_content]'
        ));
      }

      $mapping_approved = array(
        0 => '✖ (' . t('pending moderation') . ')',
        1 => '✔ (' . t('approved') . ')',
      );
      if (!empty($entity_diffs['field_approved'])) {
        $entity_diffs['field_approved']['#old'] = $mapping_approved[(int) $entity_diffs['field_approved']['#old']];
        $entity_diffs['field_approved']['#new'] = $mapping_approved[(int) $entity_diffs['field_approved']['#new']];
      }
    }
  }

}

/**
 * Implements hook_form_alter().
 */
function serchilo_form_diff_node_revisions_alter(&$form, &$form_state, $form_id) {
  
  // Prepend rendered field_approved to revision items in revisions overview.

  $mapping_approved = array(
    0 => '✖',
    1 => '✔',
  );

  foreach($form['info'] as $vid=>&$render) {
    $node = node_load($form['nid']['#value'], $vid);
    if ('shortcut' == $node->type) {
      $approved = drupal_array_get_nested_value($node->field_approved, array(LANGUAGE_NONE, 0, 'value')) ?: 0;
      $render['#markup'] = 
        theme(
          'html_tag',
          array(
            'element' => array(
              '#tag' => 'span',
              '#value' => $mapping_approved[$approved],
              '#attributes' => array(
                'title' => 
                  '✔ = ' . t('approved') . ', ' . 
                  '✖ = ' . t('pending moderation')
              )
            ) 
          )
        ) .
        ' ' . 
        $render['#markup'];
    }
  }
}


// FIELD

/**
 * Implements hook_field_formatter_info().
 */
function serchilo_field_formatter_info() {
  return array(
    'serchilo_shortcut_example_link_formatter' => array(
      'label' => t('Shortcut example link'),
      'field types' => array('text'), 
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function serchilo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $type = drupal_array_get_nested_value($instance, array('display', 'default', 'type'));

  switch ($type) {
  case 'serchilo_shortcut_example_link_formatter':
    $element[0] = theme(
      'serchilo_shortcut_example_link',
      array(
        'shortcut' => $entity->hostEntity(),
        'arguments' => ((count($items) > 0) ? $items[0]['value'] : '')
      )
    );
    break; 
  }
  return $element;
}

/**
 * Implements hook_field_attach_view_alter().
 */
function serchilo_field_attach_view_alter(&$output, $context) {

  // If rendering the console examples:
  if ($context['display'] == 'serchilo_console_examples') {

    // Remove wrapping divs.
    $output['field_example']['#prefix'] = '';
    $output['field_example']['#suffix'] = '';

    // Hide the label "Examples".
    $output['field_example']['#label_display'] = 'hidden';

    // Only show the first example.
    $output['field_example']['#items'] = array_slice($output['field_example']['#items'], 0, 1);
  }
}


// THEME 

/**
 * Implements hook_theme().
 */
function serchilo_theme($existing, $type, $theme, $path) {

  $themes = array(
    'serchilo_console' => array(
      'template' => 'serchilo-console', 
      'variables' => array('query' => null), 
      'path' => drupal_get_path('module', 'serchilo') . '/templates',
    ),
    'serchilo_opensearch' => array(
      'template' => 'serchilo-opensearch', 
      'variables' => array('content' => null), 
      'path' => drupal_get_path('module', 'serchilo') . '/templates',
    ),
    'serchilo_shortcut_example_link' => array(
    ),
  );

  return $themes;
}

/**
 * Return the render array for a shortcut example query link.
 *
 * @param array $variables
 *   Theme variables, with keys:
 *     - with_namespace
 *       True when the link text shall contain the namespace name.
 *     - (optional) source
 *       The source param value, added to the example link. 
 *     - Either
 *       - shortcut
 *         The shortcut node object.
 *       - arguments
 *         The arguments array for the query.
 *     - Or
 *       - query
 *         The whole query.
 *
 * @return void
 */
function theme_serchilo_shortcut_example_link($variables) {

  $arguments_str = '';
  if (!empty($variables['arguments'])) {
    if (is_array($variables['arguments'])) {
      $arguments_str = join(', ', $variables['arguments']); 
    }
    elseif (is_string($variables['arguments'])) {
      $arguments_str = $variables['arguments']; 
    }
  }

  if (empty($variables['source'])) {
    $variables['source'] = 'example';
  }
  
  if (!empty($variables['shortcut'])) {
    $namespace_name = taxonomy_term_load($variables['shortcut']->field_namespace[LANGUAGE_NONE][0]['tid'])->name;
    $query = 
      $variables['shortcut']->field_keyword[LANGUAGE_NONE][0]['value'] . 
      ' ' . 
      $arguments_str;

    // Trim query, useful when arguments are empty.
    $query = trim($query);

    $text = $query;

    if (!empty($variables['with_namespace'])) {
      $text = $namespace_name .  '.' .  $text;
    }
    // The query gets always the namespace name prefixed.
    $query = $namespace_name .  '.' .  $query;

  } else {
    $query = $variables['query'];
    $text = $query;
  }

  $link = array(
    '#type' => 'link',
    '#title' => $text,
    '#href' => '',
    '#options' => array(
      'attributes' => array(
        'rel' => 'nofollow',
        'class' => array('query'),
      ),
      'query' => array(
        'query' => $query,
        'source' => $variables['source'],
      ), 
    ),
  );

  return $link;
}


// VIEWS 

/**
 * Implements hook_views_post_execute().
 */
function serchilo_views_post_execute(&$view) {

  if ('changed_shortcuts' == $view->name) {
    // Nasty heuristic to filter out all non-Shortcuts,
    // due to this Views bug:
    // https://www.drupal.org/node/1754354#comment-6459056
    // https://www.drupal.org/node/1321288
    // https://www.drupal.org/node/2064975
    // https://www.drupal.org/node/1754354
    $view->result = array_filter(
      $view->result,
      function($item) {
        // Assuming only Shortcut nodes have field_approved.
        return (!empty($item->{'field_field_approved-revision_id'}));
      }
    );
  } 
}

/**
 * Implements hook_views_pre_render().
 */
function serchilo_views_pre_render(&$view) {

  // Only for Serchilo views.
  if (in_array($view->name, array('shortcuts', 'namespaces', 'namespace-types', 'tags'))) {

    module_load_include('inc', 'serchilo', 'serchilo.views');

    // Wrap filters into a collapsible panel.

    // Start opened when already some filters set.
    $default_open = serchilo_views_is_filter_used($view->filter);

    // TODO: Put this into a template.
    $view->exposed_widgets = '

   <div class="panel panel-default">
      <div class="panel-heading" onclick="(function($){ $(\'#collapseFilter\').collapse(\'toggle\'); }(jQuery)) ">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseFilter">
            Filter
          </a>
        </h4>
      </div>
      <div id="collapseFilter" class="panel-collapse collapse ' . ($default_open ? 'in' : '' ) .  '">
        <div class="panel-body">
  ' . $view->exposed_widgets . '
        </div>
      </div>
    </div>
      ';
  }
}


// BLOCK 

/**
 * Implements hook_block_info().
 */
function serchilo_block_info() {

  $blocks = array();

  $blocks['namespaces'] = array(
    'info' => 'Namespaces',
    'status' => 1,
    'region' => 'header',
    // Show only on n/* and u/* pages.
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "n/*\nu/*"
  );

  $blocks['licenses'] = array(
    'info' => 'Licenses',
    'status' => 1,
    'region' => 'footer',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => "admin/*"
  );

  $blocks['add_to_browser'] = array(
    'info' => 'Add to browser',
    'status' => 1,
    'region' => 'footer',
    // Show only on n/* and u/* pages.
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "n/*\nu/*"
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function serchilo_block_view($delta='') {

  $block = array();

  module_load_include('inc', 'serchilo', 'serchilo.block');

  switch ($delta) {
    case 'namespaces':
      $block['subject'] = NULL;
      $block['content'] = serchilo_block_namespaces();
      break;
    case 'licenses':
      $block['subject'] = NULL;
      $block['content'] = serchilo_block_licenses();
      break;
    case 'add_to_browser':
      $block['subject'] = NULL;
      $block['content'] = serchilo_block_add_to_browser();
      break;
  }

  return $block;
}


// NODE 

/**
 * Implements hook_node_presave().
 */
function serchilo_node_presave($node) {

  global $user;
  if ($node->type == 'shortcut') {

    // Make sure language is undefined.
    // (Weirdly, there seems to be no option to set this in the Frontend.)
    $node->language = LANGUAGE_NONE;

    $wnode = entity_metadata_wrapper('node', $node);

    // Set uid to editing user.
    $node->uid = $user->uid;
  }
}

/**
 * Implements hook_node_insert().
 */
function serchilo_node_insert($node) {

  if ($node->type == 'shortcut') {
    if (!empty($node->field_approved[LANGUAGE_NONE][0]['value'])) {
      if (!empty($node->field_active[LANGUAGE_NONE][0]['value'])) {
        module_load_include('inc', 'serchilo', 'serchilo.node');
        $num_affected = serchilo_insert_shortcut_row($node);
        serchilo_watchdog_check_number_of_affected_rows($num_affected, $node, __FUNCTION__);
      }
    }
  }
  if (module_exists('boost')) {
    boost_flush_caches();
  }
}

/**
 * Implements hook_node_update().
 */
function serchilo_node_update($node) {

  if ($node->type == 'shortcut') {
    // Check if this is a "real" update call
    // or just one caused by the bug in
    // https://www.drupal.org/node/2385985
    if (!empty($node->revision)) {
      if (!empty($node->field_approved[LANGUAGE_NONE][0]['value'])) {
        if (!empty($node->field_active[LANGUAGE_NONE][0]['value'])) {
          module_load_include('inc', 'serchilo', 'serchilo.node');
          $num_affected = serchilo_insert_or_update_shortcut_row($node);
          serchilo_watchdog_check_number_of_affected_rows($num_affected, $node, __FUNCTION__);
        }
      }
    }
  }
  if (module_exists('boost')) {
    boost_flush_caches();
  }
}

/**
 * Implements hook_node_delete().
 */
function serchilo_node_delete($node) {

  if ($node->type == 'shortcut') {
    if (!empty($node->field_active[LANGUAGE_NONE][0]['value'])) {
      module_load_include('inc', 'serchilo', 'serchilo.node');
      $num_affected = serchilo_delete_shortcut_row($node);
      serchilo_watchdog_check_number_of_affected_rows($num_affected, $node, __FUNCTION__);
    }
  }
  if (module_exists('boost')) {
    boost_flush_caches();
  }
}

/**
 * Implements hook_node_access().
 */
function serchilo_node_access($node, $op, $account) {

  if (node_type_get_type($node)->type == 'shortcut') {
    if ($op == 'update') {
        
      $wnode = entity_metadata_wrapper('node', $node);

      // Allow if a site namespace.
      if ('user' != $wnode->field_namespace->field_namespace_type->name->value()) {
        return NODE_ACCESS_ALLOW;
      }

      // Allow if a user namespace and owning user is logged in.
      if (
        (user_is_logged_in()) &&
        ($wnode->field_namespace->name->value() == $account->name) &&
        TRUE
      ) {
        return NODE_ACCESS_ALLOW;
      }

      // Deny in all other cases.
      return NODE_ACCESS_DENY;
    }
  }
}

/**
 * Implements hook_node_view().
 */
function serchilo_node_view($node, $view_mode, $langcode) {

  if ('shortcut' == $node->type) {

    if (empty($node->field_active[LANGUAGE_NONE][0]['value'])) {
      drupal_set_message(
        t(
          'This shortcut has been deactivated. !activate', 
          array(
            '!activate' => l(t('It can be activated here.'), 'node/' . $node->nid . '/deactivate') 
          )
        ),
        'warning'
      );
      return;
    }

    if (empty($node->field_approved[LANGUAGE_NONE][0]['value'])) {
      drupal_set_message(
        t(
          'This shortcut revision has not yet been approved, so it cannot be called. See the !editing_policy for more information.', 
          array(
            '!editing_policy' => l(t('Editing Policy'), 'help/editing') 
          )
        ),
        'warning'
      );
    }
    else {
      module_load_include('inc', 'serchilo', 'serchilo.node.view');
      $node->content['shortcut_call_form'] = drupal_get_form('serchilo_shortcut_call_form', $node);
    }
  }
}


// COMMENT 

/**
 * Implements hook_comment_insert().
 */
function serchilo_comment_insert($node) {

  if (module_exists('boost')) {
    boost_flush_caches();
  }
}

/**
 * Implements hook_comment_update().
 */
function serchilo_comment_update($node) {

  if (module_exists('boost')) {
    boost_flush_caches();
  }
}

/**
 * Implements hook_comment_delete().
 */
function serchilo_comment_delete($node) {

  if (module_exists('boost')) {
    boost_flush_caches();
  }
}


// FORM 

// Shortcut node (edit) form

/**
 * Implements hook_clone_node_alter().
 */
function serchilo_clone_node_alter(&$node, $context) {

  // Remove generated title prefix.
  if (substr($node->title, 0, 9) == 'Clone of ') {
    $node->title = substr($node->title, 9);
  }

  // Set stats fields to 0.
  $node->field_calls_last_30_days[LANGUAGE_NONE][0]['value'] = 0;
  $node->field_calls_total       [LANGUAGE_NONE][0]['value'] = 0;
  $node->field_weight            [LANGUAGE_NONE][0]['value'] = 0;
}

/**
 * Implements hook_form_alter().
 */
function serchilo_form_shortcut_node_form_alter(&$form, &$form_state, $form_id) {

  global $user;

  form_load_include($form_state, 'inc', 'serchilo', 'serchilo.node.form');

  $form['help'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'div', 
    '#attributes' => array(
      'class' => 'form-help', 
    ), 
    '#value' => l('Help for Editing shortcuts', 'help/editing'), 
    '#weight' => -10,
  );

  // If creating a new Shortcut:
  if (empty($form['nid']['#value'])) {
    if (user_is_logged_in()) {
      // Add link to set user namespace.
      $form['field_namespace']['#attached']['js'][] = array(
        'data' => drupal_get_path('module', 'serchilo') . '/js/shortcut.form.field_namespace.js',
        'type' => 'file',
      );
      $form['field_namespace']['#attached']['js'][] = array(
        'data' => array(
          'serchilo' => array(
            'user_name' => $user->name,
          ),
        ),
        'type' => 'setting',
      );
    }
    if (!empty($_GET['namespace'])) {
      $form['field_namespace'][LANGUAGE_NONE]['#default_value'] = $_GET['namespace'];
    }
    if (!empty($_GET['title'])) {
      $form['title']['#default_value'] = $_GET['title'];
    }
    if (!empty($_GET['keyword'])) {
      $form['field_keyword'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['keyword'];
    }
    if (!empty($_GET['url'])) {
      $form['field_url'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['url'];
    }
  }

  $form['title']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_keyword'][LANGUAGE_NONE][0]['value']['#element_validate'] = array(
    'serchilo_form_validate_no_tags',
    'serchilo_form_validate_no_dots',
    'serchilo_form_validate_no_whitespace',
    'serchilo_form_validate_lowercase',
  );
  $form['field_argument_names'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_url'           ][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_namespace'     ][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_field_namespace');

  array_unshift($form['field_tags'][LANGUAGE_NONE]['#element_validate'], 'serchilo_form_validate_field_tags');

  foreach (element_children($form['field_example'][LANGUAGE_NONE]) as $index) {
    if (is_int($index)) {
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_arguments  '][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_description'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
    }
  }
  $form['field_example'][LANGUAGE_NONE]['add_more']['#value'] = t('Add another example');
  $form['field_test']   [LANGUAGE_NONE]['add_more']['#value'] = t('Add another test'   );
}

/**
 * Implements hook_node_validate().
 */
function serchilo_node_validate($node, $form, &$form_state) {

  // Don't continue if there are already errors.
  if (form_get_errors()) {
    return; 
  }

  if ($node->type == 'shortcut') {

    module_load_include('inc', 'serchilo', 'serchilo.node');

    // Check if another shortcut with the same
    // keyword, argument_count and namespace exists.
    // (Yes, one '=' is correct.)
    if ($existing_shortcut = serchilo_collides_with_existing_shortcut($node)) {
      form_set_error(
        'field_keyword',
        format_plural(
          $existing_shortcut->field_argument_count[LANGUAGE_NONE][0]['value'],
          'The shortcut !title is already using the keyword %keyword and %argument_count argument.',
          'The shortcut !title is already using the keyword %keyword and %argument_count arguments.',
          array(
            '!title' => l($existing_shortcut->title, 'node/' . $existing_shortcut->nid),
            '%keyword' => $existing_shortcut->field_keyword[LANGUAGE_NONE][0]['value'],
            '%argument_count' => $existing_shortcut->field_argument_count[LANGUAGE_NONE][0]['value'],
          )
        )
      );
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function serchilo_node_submit($node, $form, &$form_state) {

  if ($node->type == 'shortcut') {

    module_load_include('inc', 'serchilo', 'serchilo.node');

    serchilo_set_shortcut_arguments_data($node);
    $is_sensible_edit = serchilo_is_sensible_edit($node);
    $node->field_approved[LANGUAGE_NONE][0]['value'] = (int) !$is_sensible_edit;
  }
}


// Discussion node (edit) form

/**
 * Implements hook_form_alter().
 */
function serchilo_form_discussion_node_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($_GET['shortcut_affected'])) {
    $shortcut = node_load($_GET['shortcut_affected']);
    $form['field_shortcuts_affected'][LANGUAGE_NONE][0]['target_id']['#default_value'] = "$shortcut->title ($shortcut->nid)";
  }
  // Hide whole "Revision information" tab.
  $form['revision_information']['#access'] = FALSE;
}


// User login form

/**
 * Implements hook_form_alter().
 */
function serchilo_form_user_login_alter(&$form, &$form_state) {

  global $base_url;

  // Only if referrer starts with base_url of this website.
  if (0 !== strpos($_SERVER['HTTP_REFERER'], $base_url)) {
    return;
  }

  // Use a relative path.
  $destination = str_replace($base_url, '', $_SERVER['HTTP_REFERER']);

  // If referrer is non-user console:
  // don't set it as redirect
  // instead rely on automatic redirect to user console.
  if (0 === strpos($destination, '/n/')) {
    return;
  }

  // Redirect to previous page.
  $form['#action'] = url('user', array('query' => array('destination' => $destination)));
  
}  

// User register form

/**
 * Implements hook_form_FORM_ID_alter().
 */
function serchilo_form_user_register_form_alter(&$form, &$form_state, $form_id) {

  form_load_include($form_state, 'inc', 'serchilo', 'serchilo.user.form');

  $form['field_language_namespace']['#access'] = FALSE;
  $form['field_country_namespace']['#access'] = FALSE;
  $form['#validate'][] = 'serchilo_form_user_register_form_validate';
}

/**
 * Implements hook_user_presave().
 */
function serchilo_user_presave(&$edit, $account, $category) {
  // set default language and country namespace if necessary
  if (empty($edit['field_language_namespace'][LANGUAGE_NONE])) {
     $edit['field_language_namespace'][LANGUAGE_NONE][0] = (array) serchilo_get_default_language_namespace();
  }
  if (empty($edit['field_country_namespace'][LANGUAGE_NONE])) {
     $edit['field_country_namespace'][LANGUAGE_NONE][0] = (array) serchilo_get_default_country_namespace();
  }
  // create user namespace if necessary
  $term['field_namespace_type'][LANGUAGE_NONE][0] = (array) serchilo_taxonomy_ensure_term('user', 'namespace_types');
  serchilo_taxonomy_ensure_term($edit['name'], 'namespaces', $term);
}


// Options list for namespaces

/**
 * Custom options list callback.
 */
function serchilo_options_list_language_namespace() {

  module_load_include('inc', 'serchilo', 'serchilo.list');
  return serchilo_options_list_namespace_by_type('language');
}

/**
 * Custom options list callback.
 */
function serchilo_options_list_country_namespace() {

  module_load_include('inc', 'serchilo', 'serchilo.list');
  return serchilo_options_list_namespace_by_type('country');
}


// OPENSEARCH HELPERS

/**
 * Return the title for the Opensearch head link.
 *
 * @param $namespaces_path
 *    String of namespaces seperated by SERCHILO_NAMESPACE_PATH_SEPARATOR.
 * @param $default_keyword
 *    (optional) String of the default keyword.
 * @return $title
 *    String of the Opensearch head link.
 */
function serchilo_opensearch_title($namespaces_path, $default_keyword = NULL) {

  $site_name = variable_get('site_name');
  if( $default_keyword ) {
    $title =  $site_name . ': ' . $namespaces_path . ' | ' . $default_keyword;
  }
  else {
    $title =  $site_name . ': ' . $namespaces_path;
  }
  return $title;
}


// DISPATCH HELPERS

/**
 * Loads default language namespace.
 *
 * @return $language_namespace 
 *   A Taxonomy term object.
 */
function serchilo_get_default_language_namespace() {
  global $language;

  $default_language = $language->language;
  $language_namespace = current(taxonomy_get_term_by_name($default_language, 'namespaces')); 

  return $language_namespace;
}

/**
 * Loads default country namespace.
 *
 * @return $language_namespace 
 *   A Taxonomy term object.
 */
function serchilo_get_default_country_namespace() {

  $ip_address = ip_address();

  $default_country_namespace_name = @geoip_country_code3_by_name($ip_address);
  $default_country_namespace_name = strtolower($default_country_namespace_name);

  // If no country namespace found: use default.
  if (
    (!$default_country_namespace_name) ||
    (strlen($default_country_namespace_name) != 3 )
  ) {
    $default_country_namespace_name  = SERCHILO_DEFAULT_COUNTRY;
  }

  $default_country_namespace = current(taxonomy_get_term_by_name($default_country_namespace_name, 'namespaces')); 

  return $default_country_namespace;
}


// TAXONOMY HELPERS

/**
 * Loads a taxonomy term, and creates it if not yet existing.
 *
 * @param string $term_name
 *   The name of the term to load.
 * @param string $vocabulary_name
 *   The name of the vocabulary the term is in.
 * @param array $term
 *   (optional) Additional settings of the term to be created.
 *   Basic (overwritable) settings are:
 *   - name:   from $term_name
 *   - vid:    from $vocabulary->vid, loaded by $vocabulary_name
 *   - format: plain_text
 *
 * @return object $term 
 *   The loaded or created taxonomy term.
 */
function serchilo_taxonomy_ensure_term($term_name, $vocabulary_name, $term = array()) {

  $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  # if namespace_type does not exist yet:
  # create it
  if(empty($term_list)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $term = array(
      'name' => $term_name,
      'vid' => (int) $vocabulary->vid,
      'format' => 'plain_text',
      'vocabulary_machine_name' => $vocabulary_name,
    ) + $term;
    $term = (object) $term;
    taxonomy_term_save($term);
    $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  }
  # get first element, the only one
  $term = array_shift($term_list);
  return $term;
}

