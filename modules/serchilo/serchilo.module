<?php

/* General TODO:
 *
 * Replace all occurences of 'command' with 'shortcut'.
 * (var and function names)
 *
 */

require_once('serchilo.constants.inc');

// HOOKS 

/**
 * Implements hook_menu().
 */
function serchilo_menu() {

  $items = array(

    'node' => array(
      'page callback' => 'serchilo_page_home',
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

    NAMESPACES_PATH_AFFIX => array(
      'page callback' => 'serchilo_page_dispatch_namespaces',
      'page arguments' => array(CONSOLE, 1),
      #'page callback' => 'serchilo_page_console_namespace',
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),
    USER_PATH_AFFIX . '/%' => array(
      'page callback' => 'serchilo_page_dispatch_user',
      'page arguments' => array(CONSOLE, 1),
      #'page callback' => 'serchilo_page_console_user',
      #'page arguments' => array(1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

  );

  return $items;
}

/**
 * Implements hook_node_presave().
 */
function serchilo_node_presave($node) {

  if ($node->type == 'shortcut') {
    // derive and set url metadata
    $url = drupal_array_get_nested_value($node->field_url, array(LANGUAGE_NONE, 0, 'value'));
    $argument_names = _serchilo_get_argument_names($url);
    drupal_array_set_nested_value($node->field_argument_names, array(LANGUAGE_NONE, 0, 'value'), join(', ', $argument_names));
    drupal_array_set_nested_value($node->field_argument_count, array(LANGUAGE_NONE, 0, 'value'), count($argument_names));

    // revoke moderation flag
    // if non-sensible edit
    $is_sensible_edit = _serchilo_is_sensible_edit($node);
    if (!$is_sensible_edit) {
      $node->revision_operation = REVISIONING_NEW_REVISION_NO_MODERATION;
    }
  }
}

/**
 * Implements hook_theme().
 */
function serchilo_theme() {
  return array(
    'serchilo-console' => array(
      'template' => 'serchilo-console', 
      'variables' => array('query' => null), 
      'path' => drupal_get_path('module', 'serchilo') . '/templates',
    ),
    /*
    'serchilo-opensearch' => array(
      'template' => 'serchilo-opensearch', 
      'variables' => array('content' => null), 
    ),
    'serchilo-redirect' => array(
      'template' => 'serchilo-redirect', 
      'variables' => array('content' => null), 
    ),
    'serchilo_definition_list' => array(
      'variables' => array('items' => array(), 'title' => NULL, 'attributes' => array()),
      'file' => 'serchilo.theme.inc',
    ),
     */
  );
}

/**
 * Implements hook_node_insert().
 */
function serchilo_node_insert($node) {
  if ($node->type == 'shortcut') {
    if (!$node->revision_moderation) {
      _serchilo_insert_shortcut_row($node);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function serchilo_node_update($node) {
  if ($node->type == 'shortcut') {
    if (!$node->revision_moderation) {
      _serchilo_insert_or_update_shortcut_row($node);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function serchilo_node_delete($node) {
  if ($node->type == 'shortcut') {
    _serchilo_delete_shortcut_row($node);
  }
}

/**
 * Implements hook_revision_publish().
 */
function serchilo_revision_publish($node) {
  if ($node->type == 'shortcut') {
    _serchilo_insert_or_update_shortcut_row($node);
  }
}


/**
 * Implements hook_node_view().
 */
function serchilo_node_view($node, $view_mode, $langcode) {
  $node->content['shortcut_call_form'] = drupal_get_form('serchilo_shortcut_call_form', $node);
}


// FORM HOOKS

function serchilo_shortcut_call_form($form, $form_state, $node) {

  $form = array();

  $form['#attributes']['class'] = array('form-inline'); 
  $form['#attributes']['role'] = 'form'; 

  /*
  // TODO:
  // Check this again. Can't believe this needs to be so bloated. 
  $items = field_get_items('node', $node, 'field_namespace');
  $namespace_value = field_view_value('node', $node, 'field_namespace', $items[0]);
  $namespace_html = render($namespace_value);
  */
  $form['keyword'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#value' => 
      #render($node->field_namespace ) .
      #$namespace_html .
      #'.' .
      $node->field_keyword[LANGUAGE_NONE][0]['value'],
    '#attributes' => array(
      'class' => array('keyword', 'form-group'), 
    ),
  );

  $form['arguments']['#tree'] = true;

  $argument_names = explode(',', $node->field_argument_names[LANGUAGE_NONE][0]['value']);
  for ($i=0; $i<count($argument_names); $i++) {
    $argument_name = $argument_names[$i];

    #$argument_example = (array_key_exists($i, $argument_examples) ? $argument_examples[$i] : '');
    $form['arguments'][$i] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#size' => 0,
      '#attributes' => array(
        'placeholder' => $argument_name,
      ), 
    );
  }

  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );

  return $form;
}


/**
 * Implements hook_form_alter().
 */
function serchilo_form_shortcut_node_form_alter(&$form, &$form_state, $form_id) {
  $form['title']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_keyword'][LANGUAGE_NONE][0]['value']['#element_validate'] = array(
    'serchilo_form_validate_no_tags',
    'serchilo_form_validate_no_dots',
    'serchilo_form_validate_no_whitespace',
  );
  $form['field_argument_names'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_url'           ][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  foreach (element_children($form['field_example'][LANGUAGE_NONE]) as $index) {
    if (is_int($index)) {
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_arguments  '][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_description'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
    }
  }
}

/**
 * Validate a form element that should contain no HTML tags.
 */
function serchilo_form_validate_no_tags($element, &$form_state) {
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != preg_replace('/<.*>/', '', $value)) {
    form_set_error(join('][', $element['#parents']), t('No HTML tags are allowed.'));
  }
}

/**
 * Validate a form element that should contain no dots.
 */
function serchilo_form_validate_no_dots($element, &$form_state) {
  $value = drupal_array_get_nested_value( $form_state['values'], $element['#parents']);
  if (strpos($value, '.') !== FALSE) {
    form_set_error(
      join('][', $element['#parents']),
      t(
        'No dots are allowed in the keyword, since !dots_are used_for_forcing_a_namespace.',
        array(
          '!dots_are used_for_forcing_a_namespace' => l(t('dots are used for forcing a namespace'), 'help/namespaces', array('fragment'=>'force')) 
        )
      )
    );
  }
}

/**
 * Validate a form element that should contain no whitespace.
 */
function serchilo_form_validate_no_whitespace($element, &$form_state) {

  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != preg_replace('/\s*/', '', $value)) {
    form_set_error( join( '][', $element['#parents']), t('Spaces are not allowed.'));
  }
}


/**
 * Implements hook_node_validate().
 */
function serchilo_node_validate($node, $form, &$form_state) {
return;
  if ($node->type == 'shortcut') {
    // dpm($argument_names);
    // dpm($node);
    // TODO:
    // check for collisions
  }
}


// DB HELPER FUNCTIONS

/**
 * Retrieve database fields from shortcut node.
 *
 * @param $node
 *   Node of type shortcut
 * @return
 *   array to pass to fields()
 */
function _serchilo_shortcut_to_db_fields($node) {

  $fields = array(
    'nid' => $node->nid,
    'title' => $node->title,
    'keyword' =>        drupal_array_get_nested_value($node->field_keyword,        array(LANGUAGE_NONE, 0, 'value')),
    'argument_names' => drupal_array_get_nested_value($node->field_argument_names, array(LANGUAGE_NONE, 0, 'value')),
    'argument_count' => drupal_array_get_nested_value($node->field_argument_count, array(LANGUAGE_NONE, 0, 'value')),
    'url' =>            drupal_array_get_nested_value($node->field_url,            array(LANGUAGE_NONE, 0, 'value')),
    'input_encoding' => drupal_array_get_nested_value($node->field_input_encoding, array(LANGUAGE_NONE, 0, 'value')),
    'weight' =>         drupal_array_get_nested_value($node->field_weight,         array(LANGUAGE_NONE, 0, 'value')),
    'invisible' =>      drupal_array_get_nested_value($node->field_invisible,      array(LANGUAGE_NONE, 0, 'value')),
    'set_referrer' =>   drupal_array_get_nested_value($node->field_set_referrer,   array(LANGUAGE_NONE, 0, 'value')),
    'namespace_id' =>   drupal_array_get_nested_value($node->field_namespace,      array(LANGUAGE_NONE, 0, 'tid'  )),
    'namespace_name' => drupal_array_get_nested_value($node->field_namespace,      array(LANGUAGE_NONE, 0, 'name' )),
  );

  return $fields;
}

function _serchilo_insert_or_update_shortcut_row($node) {
  $row_count = db_select('serchilo_shortcut') 
    ->fields('serchilo_shortcut')
    ->condition('nid', $node->nid )
    ->execute()
    ->rowCount() 
    ;
  if ($row_count == 0) {
    _serchilo_insert_shortcut_row($node); 
  }
  else {
    _serchilo_update_shortcut_row($node); 
  }
}

function _serchilo_insert_shortcut_row($node) {
  $fields = _serchilo_shortcut_to_db_fields($node);
  $result = db_insert('serchilo_shortcut') 
    ->fields($fields)
    ->execute();
  //dpm($result);
  return;
}

function _serchilo_update_shortcut_row($node) {
  $fields = _serchilo_shortcut_to_db_fields($node);
  $num_updated = db_update('serchilo_shortcut') 
    ->fields($fields)
    ->condition('nid', $node->nid )
    ->execute();
  // TODO
  // raise error when $num_updated != 1
  //dpm($num_updated);
  return $num_updated;
}

function _serchilo_delete_shortcut_row($node) {
  $num_deleted = db_delete('serchilo_shortcut') 
    ->condition('nid', $node->nid )
    ->execute();
  // TODO
  // raise error when $num_deleted != 1
  dpm($num_deleted);
}


// SHORTCUT HELPERS

function _serchilo_get_argument_names($url) {

  // parse url for arguments
  preg_match_all(
    // ? makes ungreedy
    '/\{s:(.+?)\}/',
    $url,
    $matches,
    PREG_PATTERN_ORDER
  );
  $argument_names = $matches[1];

  // treat arguments with same name as only one argument
  $argument_names = array_unique($argument_names);

  // make sure indexes have no gaps
  $argument_names = array_values($argument_names);

  return $argument_names;
}

/**
 * Check if shortcut edit is sensible edit.
 *
 * @param $node
 *   Node of type shortcut.
 * @return 
 *   TRUE if edit is sensible.
 */
function _serchilo_is_sensible_edit($node)
{
  $is_sensible_edit = NULL;
  // TODO:
  // better use node_type_get_type() ?
  if ($node->type == 'shortcut') {
    if (empty($node->is_new)) {
      $is_sensible_edit = (
        (
          // change in keyword
          drupal_array_get_nested_value($node->original->field_keyword, array(LANGUAGE_NONE, 0, 'value')) 
          != drupal_array_get_nested_value($node->field_keyword, array(LANGUAGE_NONE, 0, 'value'))
        ) 
        ||
        (
          // change in url
          drupal_array_get_nested_value($node->original->field_url, array(LANGUAGE_NONE, 0, 'value')) 
          != drupal_array_get_nested_value($node->field_url, array(LANGUAGE_NONE, 0, 'value'))
        ) 
        ||
        (
          // change in namespace
          drupal_array_get_nested_value($node->original->field_namespace, array(LANGUAGE_NONE, 0, 'tid')) 
          != drupal_array_get_nested_value($node->field_namespace, array(LANGUAGE_NONE, 0, 'tid'))
        ) 
      );
    }
    else {
      // every new shortcut is sensible
      $is_sensible_edit = TRUE;
    }
  }
  return $is_sensible_edit;
}



function _serchilo_array_value($array, $key, $default_value = null) {
  if (isset($array[$key])) {
    return $array[$key];
  }
  return $default_value;
}


// IMPORT

function serchilo_import_shortcuts($file = NULL, $verbose = FALSE) {

  if ($verbose) {
    echo "Importing shortcuts...\n";
  }

  if (!file_exists($file)) {
    return 'Could not find file ' . $file;
  }

  $data_json = file_get_contents($file);
  $data = drupal_json_decode($data_json);

  if ($data === NULL) {
    return 'Could not parse file ' . $file;
  }

  $rows = $data['namespaces']; 
  $vocabularies = taxonomy_vocabulary_get_names();
  foreach ($rows as $row) {

    $namespace         = new StdClass;
    $namespace->vid    = (int) $vocabularies['namespace_types']->vid;
    $namespace->format = 'plain_text';

    foreach (array_keys($row) as $key) {
      switch ($key) {
      case 'type':
        $namespace_type = serchilo_taxonomy_ensure_term($row[$key], 'namespace_types');
        $namespace->field_namespace_type[LANGUAGE_NONE][0]['tid'] = $namespace_type->tid;
        break;
      case 'name':
      case 'description':
        $namespace->{$key} = $row[$key];
        break;
      }
    }
    taxonomy_term_save($namespace);
  }

  $rows = $data['shortcuts']; 

  //for debug: try to import only 1
  //$rows = array_slice($rows, 0, 1);

  foreach ($rows as $row) {
    $namespace = serchilo_taxonomy_ensure_term($row['namespace'], 'namespaces');
    $shortcut = new StdClass;
    $shortcut->type = 'shortcut';
    $shortcut->uid = 1;
    $shortcut->status = 1;
    $shortcut->revision_moderation = FALSE;
    $shortcut->title = $row['title'];
    drupal_array_set_nested_value($shortcut->field_keyword,        array( LANGUAGE_NONE, 0, 'value'), $row['keyword']);
    drupal_array_set_nested_value($shortcut->field_argument_names, array( LANGUAGE_NONE, 0, 'value'), $row['argument_names']);
    drupal_array_set_nested_value($shortcut->field_argument_count, array( LANGUAGE_NONE, 0, 'value'), count(explode(',', $row['argument_names'])));
    drupal_array_set_nested_value($shortcut->field_url,            array( LANGUAGE_NONE, 0, 'value'), $row['url']);
    drupal_array_set_nested_value($shortcut->field_weight,         array( LANGUAGE_NONE, 0, 'value'), $row['weight']);
    drupal_array_set_nested_value($shortcut->field_invisible,      array( LANGUAGE_NONE, 0, 'value'), $row['invisible']);
    drupal_array_set_nested_value($shortcut->field_set_referrer,   array( LANGUAGE_NONE, 0, 'value'), $row['set_referrer']);
    drupal_array_set_nested_value($shortcut->field_command_id,     array( LANGUAGE_NONE, 0, 'value'), $row['id']);
    drupal_array_set_nested_value($shortcut->field_namespace,      array( LANGUAGE_NONE, 0 ), (array) $namespace);
    for ($i=0; $i<count($row['tags']); $i++) {
      #print_r( $row['tags'][$i]);
      $tag = serchilo_taxonomy_ensure_term($row['tags'][$i], 'tags');
      drupal_array_set_nested_value($shortcut->field_tags, array( LANGUAGE_NONE, $i, 'tid'), $tag->tid);
    }
    for ($i=0; $i<count($row['examples']); $i++) {
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_example'));
      $field_collection_item->setHostEntity('node', $shortcut);
      $field_collection_item->field_example_arguments[LANGUAGE_NONE][]['value'] = $row['examples'][$i][0];
      $field_collection_item->field_example_description[LANGUAGE_NONE][]['value'] = $row['examples'][$i][1];
      $field_collection_item->save();
    }
    node_save($shortcut);
    echo ".";
  }
}

function serchilo_taxonomy_ensure_term($term_name, $vocabulary_name, $term = array()) {

  $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  # if namespace_type does not exist yet:
  # create it
  if(empty($term_list)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $term = array(
      'name' => $term_name,
      'vid' => (int) $vocabulary->vid,
      'format' => 'plain_text',
    ) + $term;
    $term = (object) $term;
    taxonomy_term_save($term);
    $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  }
  # get first element, the only one
  $term = array_shift($term_list);
  return $term;
}

