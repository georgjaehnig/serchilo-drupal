<?php

require_once('serchilo.constants.inc');

// HOOKS 

/**
 * Implements hook_watchdog().
 */
function serchilo_watchdog($log_entry) {

  $last_watchdog_mail = (int) variable_get('serchilo_last_watchdog_mail');
  $site_mail          =       variable_get('site_mail');

  // Mail all PHP errors to $site_mail.
  if (
    ('php' == $log_entry['type']) &&
    //(strpos($log_entry['variables']['%file'],'custom/serchilo') !== false) &&
    ( $last_watchdog_mail < time() - SERCHILO_WATCHDOG_MAIL_INTERVAL ) &&
    TRUE
  ) {
    $params['subject'] = 'Error on new Serchilo';
    $params['body'] = 
      'log_entry: ' . var_export($log_entry, TRUE) .
      ''
    ;
    //drupal_mail('serchilo', 'error', $site_mail, LANGUAGE_NONE, $params);
    variable_set('serchilo_last_watchdog_mail', time());
  }
}

/**
 * Implements hook_cron().
 */
function serchilo_cron() {

  module_load_include('inc', 'serchilo', 'serchilo.export');
  serchilo_export();

  module_load_include('inc', 'serchilo', 'serchilo.weights');
  serchilo_calculate_shortcut_calls();
  serchilo_calculate_shortcut_weights();
}

/**
 * Implements hook_static_content_dirs().
 */
function serchilo_static_content_dirs() {
  $dir = drupal_get_path('module', 'serchilo') . '/static_content';
  return array(
    $dir => array()
  );
}


// MENU HOOKS

/**
 * Implements hook_menu().
 */
function serchilo_menu() {

  $items = array(

    'node' => array(
      'page callback' => 'serchilo_page_home',
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

    SERCHILO_NAMESPACES_PATH_AFFIX => array(
      'page callback' => 'serchilo_page_dispatch_namespaces',
      'page arguments' => array(SERCHILO_CONSOLE, 1),
      #'page callback' => 'serchilo_page_console_namespace',
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),
    SERCHILO_USER_PATH_AFFIX . '/%' => array(
      'page callback' => 'serchilo_page_dispatch_user',
      'page arguments' => array(SERCHILO_CONSOLE, 1),
      #'page callback' => 'serchilo_page_console_user',
      #'page arguments' => array(1),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.inc',
    ),

    SERCHILO_OPENSEARCH_DEFINITION_PATH_AFFIX . '/' . SERCHILO_NAMESPACES_PATH_AFFIX => array(
      'page callback' => 'serchilo_page_opensearch',
      'page arguments' => array(1, 2),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.opensearch.inc',
    ),
    SERCHILO_OPENSEARCH_DEFINITION_PATH_AFFIX . '/' . SERCHILO_USER_PATH_AFFIX . '/%' => array(
      'page callback' => 'serchilo_page_opensearch',
      'page arguments' => array(1, 2),
      'access callback' => true,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.opensearch.inc',
    ),

    'user/%user/shortcuts' => array(
      'title' => 'My shortcuts',
      'page callback' => 'serchilo_page_user_shortcuts',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_LOCAL_TASK,
      'file' => 'serchilo.pages.user.inc',
    ),

    // Change console namespaces

    SERCHILO_NAMESPACES_PATH_AFFIX . '/%/edit' => array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('serchilo_form_console_namespaces', 1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.console.edit.inc',
      'title' => 'Change namespaces',
    ),

    // Shortcut 'changed' view

    'shortcuts/%/changed' => array(
      'page callback' => 'serchilo_page_shortcut_changed',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
      'file' => 'serchilo.pages.shortcut.inc',
    ),

    // Redirect broken Shortcut URLs

    'shortcuts/%' => array(
      'page callback' => 'serchilo_redirect_shortcuts',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'serchilo.pages.redirect.inc',
    ),

  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function serchilo_menu_alter(&$items) {

  // Rename user edit tab.
  $items['user/%user/edit']['title'] = 'My account';

  // Add delete tab to nodes.
  $items['node/%node/delete']['context'] = MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE;

  // Make shortcut clone link a tab.
  $items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;

  // Rename shortcut clone tab.
  $items['node/%node/clone/%clone_token']['title'] = 'Clone';
  $items['node/%node/clone/%clone_token']['title callback'] = '';

  // Redirect taxonomy terms to shortcuts/.
  $items['taxonomy/term/%taxonomy_term']['page callback'] = 'serchilo_redirect_taxonomy';
  $items['taxonomy/term/%taxonomy_term']['file'] = 'serchilo.pages.redirect.inc';
  $items['taxonomy/term/%taxonomy_term']['module'] = 'serchilo';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function serchilo_menu_local_tasks_alter(&$data, $router_item, $root_path) {

  // For node view:
  // Insert 'Clone to my' tab
  if ('node/%' == $root_path) {
    foreach($data['tabs'][0]['output'] as $index=>$tab) {
      if ('clone_node_check' == $tab['#link']['page_callback']) {
        break;
      }
    }
    $tab['#link']['title'] = t('Clone to my');
    $tab['#link']['localized_options']['query']['user'] = TRUE;
    array_splice($data['tabs'][0]['output'], $index+1, 0, array($tab) );
  
  }

  // For 'shortcuts' view:
  // Insert 'Add shortcut' tabs
  if ('shortcuts' == $root_path) {

    // Add some tabs.

    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#active' => TRUE,
      '#link' => array(
        'title' => t('List'),
        'href' => 'shortcuts',
        'access' => TRUE,
        'localized_options' => array(),
      ),
    );

    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Create new shortcut'),
        'href' => 'node/add/shortcut',
        'access' => TRUE,
        'localized_options' => array(),
      ),
    );

    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Create new shortcut in my namespace'),
        'href' => 'node/add/shortcut',
        'access' => 'user_is_logged_in',
        'localized_options' => array(
          'query' => array(
            'user' => TRUE, 
          ),
        ),
      ),
    );

    $data['tabs'][0]['count'] = (user_is_logged_in() ? 3 : 2);
  }
}


// THEME HOOKS 

/**
 * Implements hook_theme().
 */
function serchilo_theme($existing, $type, $theme, $path) {

  $themes = array(
    'serchilo_console' => array(
      'template' => 'serchilo-console', 
      'variables' => array('query' => null), 
      'path' => drupal_get_path('module', 'serchilo') . '/templates',
    ),
    'serchilo_opensearch' => array(
      'template' => 'serchilo-opensearch', 
      'variables' => array('content' => null), 
      'path' => drupal_get_path('module', 'serchilo') . '/templates',
    ),
    'serchilo_shortcut_example_link' => array(
    ),
  );

  return $themes;
}

/**
 * Implements hook_field_formatter_info().
 */
function serchilo_field_formatter_info() {
  return array(
    'serchilo_shortcut_example_link_formatter' => array(
      'label' => t('Shortcut example link'),
      'field types' => array('text'), 
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function serchilo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {


  $type = drupal_array_get_nested_value($instance, array('display', 'default', 'type'));

  switch ($type) {
  case 'serchilo_shortcut_example_link_formatter':
    $element[0] = theme(
      'serchilo_shortcut_example_link',
      array(
        'shortcut' => $entity->hostEntity(),
        'arguments' => $items[0]['safe_value']
      )
    );
    break; 
  }
  return $element;
}

/**
 * Return the render array for a shortcut example query link.
 *
 * @param array $variables
 *   Theme variables, with keys:
 *     - shortcut
 *       The shortcut node object.
 *     - arguments
 *       The arguments array for the query.
 *     - with_namespace
 *       True when the link text shall contain the namespace name.
 *
 * @return void
 */
function theme_serchilo_shortcut_example_link($variables) {

  $shortcut = $variables['shortcut'];
  $arguments = $variables['arguments'];

  if (is_array($arguments)) {
    $arguments_str = join(', ', $arguments); 
  }
  elseif (is_string($arguments)) {
    $arguments_str = $arguments; 
  }

  
  $namespace_name = taxonomy_term_load($shortcut->field_namespace[LANGUAGE_NONE][0]['tid'])->name;
  
  $query = 
    $shortcut->field_keyword[LANGUAGE_NONE][0]['value'] . 
    ' ' . 
    $arguments_str;

  // useful when arguments are empty
  $query = trim($query);

  $text = $query;

  if (!empty($variables['with_namespace'])) {
    $text = $namespace_name .  '.' .  $text;
  }

  // The query gets always the namespace name prefixed.
  $query = $namespace_name .  '.' .  $query;

  $link = l(
    $text,
    '',
    array(
      'attributes' => array(
        'rel' => 'nofollow',
        'class' => array('query'),
      ),
      'query' => array(
        'query' => $query,
      ), 
    )
  );

  return $link;
}


// VIEWS HOOKS

/**
 * Implements hook_views_pre_render().
 */
function serchilo_views_pre_render(&$view) {

  // Only for Serchilo views.
  if (in_array($view->name, array('shortcuts', 'namespaces', 'namespace-types', 'tags'))) {

    // Wrap filters into a collapsible panel.

    // Start opened when already some filters set.
    $default_open = count(drupal_get_query_parameters()) > 0;

    // TODO: Put this into a template.
    $view->exposed_widgets = '

   <div class="panel panel-default">
      <div class="panel-heading" onclick="(function($){ $(\'#collapseFilter\').collapse(\'toggle\'); }(jQuery)) ">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#collapseFilter">
            Filter
          </a>
        </h4>
      </div>
      <div id="collapseFilter" class="panel-collapse collapse ' . ($default_open ? 'in' : '' ) .  '">
        <div class="panel-body">
  ' . $view->exposed_widgets . '
        </div>
      </div>
    </div>
      ';
  }
}


// BLOCK HOOKS

/**
 * Implements hook_block_info().
 */
function serchilo_block_info() {

  $blocks = array();

  $blocks['namespaces'] = array(
    'info' => 'Namespaces',
    'status' => 1,
    'region' => 'header',
  );

  $blocks['licenses'] = array(
    'info' => 'Licenses',
    'status' => 1,
    'region' => 'footer',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function serchilo_block_view($delta='') {

  $block = array();

  switch ($delta) {
    case 'namespaces':
      $block['subject'] = NULL;
      $block['content'] = serchilo_block_namespaces();
      break;
    case 'licenses':
      $block['subject'] = NULL;
      $block['content'] = serchilo_block_licenses();
      break;
  }

  return $block;
}

/**
 * Display current namespaces.
 */
function serchilo_block_namespaces() {

  $namespaces = drupal_static('serchilo_namespaces');

  // Get out if no namespaces are set.
  if (count($namespaces) == 0) {
    return;
  }

  $title = array(
    '#type' => 'link',
    '#title' => 'Namespaces:',
    '#href' => 'help/namespaces',
    '#attributes' => array(
      'class' => array(
      ),
    ),
  );

  // Create links for all namespaces.
  $namespace_links = array();
  foreach ($namespaces as $namespace) {
    $uri = entity_uri('taxonomy_term', $namespace);
    $namespace_links[] = array(
      '#type' => 'link',
      '#title' => $namespace->name,
      '#href' => $uri['path'],
      '#options' => $uri['options'],
      '#attributes' => array(
        'class' => array('namespace'),
        'title' => $namespace->description,
      ),
    );

  }

  // Create edit link if namespaces are editable.
  if (SERCHILO_NAMESPACES_PATH_AFFIX == arg(0)) {
    $link_path = SERCHILO_NAMESPACES_PATH_AFFIX . '/' . arg(1) . '/edit';
  }
  else if (user_is_logged_in()) {
    $uri = entity_uri('user', $GLOBALS['user']);
    $link_path = $uri['path'] . '/edit';
  }

  if (isset($link_path)) {
    $edit_link = array(
      '#type' => 'link',
      '#title' => 'change',
      '#href' => $link_path,
      '#attributes' => array(
        'class' => array(
          'btn', 
          'btn-sm', 
          'btn-default'
        ),
      ),
    );
  }
  else {
    $edit_link = array();
  }
 
  return array_merge(
    array($title),
    $namespace_links,
    array($edit_link)
  );
}

/**
 * Display licenses.
 */
function serchilo_block_licenses() {

  $dir = drupal_get_path('module', 'serchilo');

  // TODO: Solve this with theme('image'..);
  return '
    <a href="https://github.com/georgjaehnig/serchilo-drupal">
    <img src="/' . $dir . '/svg/agpl-v3.svg" width="72" height="30" />
    </a>
    <a href="/export">
    <img src="/' . $dir . '/svg/cc-by-sa.svg" width="80" height="15" />
    </a>
    ';
}


// NODE HOOKS

/**
 * Implements hook_node_insert().
 */
function serchilo_node_insert($node) {
  if ($node->type == 'shortcut') {
    if (!$node->revision_moderation) {
      module_load_include('inc', 'serchilo', 'serchilo.sync');
      serchilo_insert_shortcut_row($node);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function serchilo_node_update($node) {
  if ($node->type == 'shortcut') {
    if (!$node->revision_moderation) {
      module_load_include('inc', 'serchilo', 'serchilo.sync');
      serchilo_insert_or_update_shortcut_row($node);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function serchilo_node_delete($node) {
  if ($node->type == 'shortcut') {
    module_load_include('inc', 'serchilo', 'serchilo.sync');
    serchilo_delete_shortcut_row($node);
  }
}

/**
 * Implements hook_node_presave().
 */
function serchilo_node_presave($node) {

  if ($node->type == 'shortcut') {
    // derive and set url metadata
    $argument_names = serchilo_get_argument_names(
      drupal_array_get_nested_value($node->field_url,             array(LANGUAGE_NONE, 0, 'value')),
      drupal_array_get_nested_value($node->field_post_parameters, array(LANGUAGE_NONE, 0, 'value'))
    );
    drupal_array_set_nested_value($node->field_argument_names, array(LANGUAGE_NONE, 0, 'value'), join(', ', $argument_names));
    drupal_array_set_nested_value($node->field_argument_count, array(LANGUAGE_NONE, 0, 'value'), count($argument_names));

    // Only if this is a edit
    // where a new revision has to be set
    // (i.e. not an automatic edit by weights update cron function)
    if ($node->revision_operation > REVISIONING_NO_REVISION) {
      // revoke moderation flag
      // if non-sensible edit
      $is_sensible_edit = serchilo_is_sensible_edit($node);
      if (!$is_sensible_edit) {
        $node->revision_operation = REVISIONING_NEW_REVISION_NO_MODERATION;
      }
    }
  }
}

/**
 * Implements hook_revision_publish().
 */
function serchilo_revision_publish($node) {
  if ($node->type == 'shortcut') {
    module_load_include('inc', 'serchilo', 'serchilo.sync');
    serchilo_insert_or_update_shortcut_row($node);
  }
}

/**
 * Implements hook_node_access().
 */
function serchilo_node_access($node, $op, $account) {

  if (node_type_get_type($node)->type == 'shortcut') {
    if ($op == 'update') {

      // Only if this is a actual node page,
      // not if a field collection page.
      if (isset($node->field_namespace[LANGUAGE_NONE][0]['taxonomy_term'])) {

        // Allow if a site namespace.
        
        if (strlen($node->field_namespace[LANGUAGE_NONE][0]['taxonomy_term']->name) < 4) {
          return NODE_ACCESS_ALLOW;
        }

        // Allow if a user namespace and owning user is logged in.

        if (
          (user_is_logged_in()) &&
          ($node->field_namespace[LANGUAGE_NONE][0]['taxonomy_term']->name == $account->name) &&
          TRUE
        ) {
          return NODE_ACCESS_ALLOW;
        }

        // Deny in all other cases.

        return NODE_ACCESS_DENY;
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function serchilo_node_view($node, $view_mode, $langcode) {

  if ('shortcut' == $node->type) {
    $node->content['shortcut_call_form'] = drupal_get_form('serchilo_shortcut_call_form', $node);
  }
}

/**
 * Implements hook_node_view_alter().
 */
function serchilo_node_view_alter(&$build) {

  // Remove comment links like
  // "Add new comment".
  $build['links']['comment'] = array();
}


// FORM HOOKS

// Shortcut call form

/**
 * Implements hook_FORM_ID_form().
 *
 * Builds a form for calling a shortcut.
 *
 * @param array $form
 * @param array $form_state
 *   Standard form hook arguments.
 *
 * @param object $node
 *   The node of type shortcut
 *   to build the from.
 *
 * @return array $form
 *   The built form.
 */
function serchilo_shortcut_call_form($form, $form_state, $node) {

  $form = array();

  $form['#attributes']['class'] = array('form-inline'); 
  $form['#attributes']['role'] = 'form'; 

  /*
  // TODO:
  // Check this again. Can't believe this needs to be so bloated. 
  $items = field_get_items('node', $node, 'field_namespace');
  $namespace_value = field_view_value('node', $node, 'field_namespace', $items[0]);
  $namespace_html = render($namespace_value);
  */
  $form['keyword'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'div',
    '#value' => 
      #render($node->field_namespace ) .
      #$namespace_html .
      #'.' .
      $node->field_keyword[LANGUAGE_NONE][0]['value'],
    '#attributes' => array(
      'class' => array('keyword', 'form-group'), 
    ),
  );

  $form['arguments']['#tree'] = true;

  if (!empty($node->field_argument_names[LANGUAGE_NONE][0]['value'])) {
    $argument_names = explode(',', $node->field_argument_names[LANGUAGE_NONE][0]['value']);
  }
  else {
    $argument_names = array();
  }
  for ($i=0; $i<count($argument_names); $i++) {
    $argument_name = $argument_names[$i];

    #$argument_example = (array_key_exists($i, $argument_examples) ? $argument_examples[$i] : '');
    $form['arguments'][$i] = array(
      '#type' => 'textfield',
      '#required' => true,
      '#size' => 0,
      '#attributes' => array(
        'placeholder' => $argument_name,
      ), 
    );
  }

  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );

  // TODO: This should rather be in the theme,
  // but weirdly, in hook_preprocess_form() it is too late
  // for the JS to get recognized and attached.
  $form['#attached']['js'][] = drupal_get_path('module', 'serchilo') . '/js/shortcut-call-form.js';

  return $form;
}

/**
 * Implements hook_FORM_ID_form_submit().
 *
 * Builds a query out of the shortcut form arguments
 * and redirects it to the query handler.
 *
 * @param array $form
 * @param array $form_state
 *   Standard form hook arguments.
 *
 * @return void
 */
function serchilo_shortcut_call_form_submit($form, &$form_state) {

  if (user_is_logged_in()) {
    // Logged users call their user path.
    global $user; 
    $path = 'u/' . $user->name;
  } else {
    // Anonymous user get the default language and country namespace.
    $path = 'n/' .
      serchilo_get_default_language_namespace()->name .
      '.' .
      serchilo_get_default_country_namespace()->name .
      '';
  }
  $url = url(
    $path,
    array(
      'query' => array(
        'query' => 
        // Force namespace of current shortcut
        $form_state['values']['node']->field_namespace[LANGUAGE_NONE][0]['taxonomy_term']->name .
        '.' . 
        // Prepend keyword
        $form_state['values']['node']->field_keyword[LANGUAGE_NONE][0]['value'] .
        ' ' .
        // Add submitted arguments
        join(',', drupal_array_get_nested_value($form_state, array('values','arguments')) ?: array())
        
      ) 
    ) 
  );
  global $base_url;
  $url = $base_url . $url;
  drupal_goto($url);
}


// Shortcut node (edit) form

/**
 * Implements hook_form_alter().
 */
function serchilo_form_shortcut_node_form_alter(&$form, &$form_state, $form_id) {

  global $user;

  // If creating a new Shortcut:
  if (empty($form['nid']['#value'])) {
    if (isset($_GET['user'])) {
      if (user_is_logged_in()) {
        // Preset namespace with user name.
        $form['field_namespace'][LANGUAGE_NONE]['#default_value'] = $user->name;
      }
    }
    if (!empty($_GET['namespace'])) {
      $form['field_namespace'][LANGUAGE_NONE]['#default_value'] = $_GET['namespace'];
    }
    if (!empty($_GET['title'])) {
      $form['title']['#default_value'] = $_GET['title'];
    }
    if (!empty($_GET['keyword'])) {
      $form['field_keyword'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['keyword'];
    }
    if (!empty($_GET['url'])) {
      $form['field_url'][LANGUAGE_NONE][0]['value']['#default_value'] = $_GET['url'];
    }
  }

  $form['title']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_keyword'][LANGUAGE_NONE][0]['value']['#element_validate'] = array(
    'serchilo_form_validate_no_tags',
    'serchilo_form_validate_no_dots',
    'serchilo_form_validate_no_whitespace',
    'serchilo_form_validate_lowercase',
  );
  $form['field_argument_names'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_url'           ][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
  $form['field_namespace'     ][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_namespace');
  foreach (element_children($form['field_example'][LANGUAGE_NONE]) as $index) {
    if (is_int($index)) {
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_arguments  '][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
      $form['field_example'][LANGUAGE_NONE][$index]['field_example_description'][LANGUAGE_NONE][0]['value']['#element_validate'] = array('serchilo_form_validate_no_tags');
    }
  }
}

/**
 * Validate a form element that should contain no HTML tags.
 */
function serchilo_form_validate_no_tags($element, &$form_state) {
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != preg_replace('/<.*>/', '', $value)) {
    form_error(
      $element, 
      t(
        '@title must not contain HTML tags.', 
        array(
          '@title' => $element['#title'], 
        )
      )
    );
  }
}

/**
 * Validate a form element that should contain no dots.
 */
function serchilo_form_validate_no_dots($element, &$form_state) {
  $value = drupal_array_get_nested_value( $form_state['values'], $element['#parents']);
  if (strpos($value, '.') !== FALSE) {
    form_error(
      $element,
      t(
        'No dots are allowed in the keyword, since !dots_are used_for_forcing_a_namespace.',
        array(
          '!dots_are used_for_forcing_a_namespace' => l(t('dots are used for forcing a namespace'), 'help/namespaces', array('fragment'=>'force')) 
        )
      )
    );
  }
}

/**
 * Validate a form element that should contain no whitespace.
 */
function serchilo_form_validate_no_whitespace($element, &$form_state) {

  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != preg_replace('/\s*/', '', $value)) {
    form_error(
      $element, 
      t(
        '@title must not contain spaces.', 
        array(
          '@title' => $element['#title'], 
        )
      )
    );
  }
}

/**
 * Validate a form element that must be lowercase.
 */
function serchilo_form_validate_lowercase($element, &$form_state) {

  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  if ($value != strtolower($value)) {
    form_error(
      $element, 
      t(
        '@title must be lowercase.', 
        array(
          '@title' => $element['#title'], 
        )
      )
    );
  }
}

/**
 * Validate namespace.
 */
function serchilo_form_validate_namespace($element, &$form_state) {

  global $user;

  $namespace_name = drupal_array_get_nested_value($form_state['values'], array_slice($element['#parents'], 0, 2));

  if (strlen($namespace_name) >= 4) {
    if (user_is_logged_in()) {
      if ($namespace_name != $user->name) {
        form_error( $element, t('Namespace must be a site namespace or your user namespace.'));
      }
    } else {
      form_error( $element, t('Namespace must be a site namespace.'));
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function serchilo_node_validate($node, $form, &$form_state) {

  if ($node->type == 'shortcut') {

    // Check if another shortcut with the same
    // keyword, argument_count and namespace exists.

    $efq = new EntityFieldQuery;

    $result = $efq
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'shortcut')
      // Exclude the current shortcut.
      ->propertyCondition('nid', $node->nid, '!=')  
      ->fieldCondition('field_keyword',        'value',  $node->field_keyword[LANGUAGE_NONE][0]['value'])
      ->fieldCondition('field_argument_count', 'value',  $node->field_argument_count[LANGUAGE_NONE][0]['value'])
      ->fieldCondition('field_namespace',      'tid',    $node->field_namespace[LANGUAGE_NONE][0]['tid'])
      ->execute();

    // If found a colliding shortcut:
    if (!empty($result)) {
      $existing_shortcut_nid = array_keys($result['node'])[0];
      $existing_shortcut = node_load($existing_shortcut_nid);
      form_set_error(
        'field_keyword',
        format_plural(
          $existing_shortcut->field_argument_count[LANGUAGE_NONE][0]['value'],
          'The shortcut !title is already using the keyword %keyword and %argument_count argument.',
          'The shortcut !title is already using the keyword %keyword and %argument_count arguments.',
          array(
            '!title' => l($existing_shortcut->title, 'node/' . $existing_shortcut->nid),
            '%keyword' => $existing_shortcut->field_keyword[LANGUAGE_NONE][0]['value'],
            '%argument_count' => $existing_shortcut->field_argument_count[LANGUAGE_NONE][0]['value'],
          )
        )
      );
    }
  }
}


// User register form

/**
 * Implements hook_form_FORM_ID_alter().
 */
function serchilo_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['field_language_namespace']['#access'] = FALSE;
  $form['field_country_namespace']['#access'] = FALSE;
  $form['#validate'][] = 'serchilo_form_user_register_form_validate';
}

/**
 * Validate user registration.
 */
function serchilo_form_user_register_form_validate($form, &$form_state) {

  // Lowercase the username.
  $form_state['values']['name'] = strtolower($form_state['values']['name']);
  
  // Extract the submitted name.
  $name = $form_state['values']['name'];

  // Make sure length is >=4.
  // Shorter lengths are reserved for site namespaces like language and country 
  // namespaces.
  if (strlen($name) < 4) {
    form_set_error('name', t('The username must contain at least 4 characters.'));
  }

  // Exclude dots and dashes.
  // (Names will be namespaces, dots are used to separate namespaces. And for 
  // dashes I forgot the reason. :-/ )
  if (
    (strpos($name, ' ') !== false) ||
    (strpos($name, '.') !== false) ||
    (strpos($name, '-') !== false) 
  ) {
    form_set_error('name', t('The username must not contain ".", "-" or spaces.'));
  }

  // Disallow user names that collide with existing paths.
  if (in_array($name, array('login', 'autocomplete', 'login', 'register', 'password', 'reset', 'logout'))) {
    form_set_error('name', t('This username is not allowed.'));
  }
}

/**
 * Implements hook_user_presave().
 */
function serchilo_user_presave(&$edit, $account, $category) {
  // set default language and country namespace if necessary
  if (empty($edit['field_language_namespace'][LANGUAGE_NONE])) {
     $edit['field_language_namespace'][LANGUAGE_NONE][0] = (array) serchilo_get_default_language_namespace();
  }
  if (empty($edit['field_country_namespace'][LANGUAGE_NONE])) {
     $edit['field_country_namespace'][LANGUAGE_NONE][0] = (array) serchilo_get_default_country_namespace();
  }
  // create user namespace if necessary
  $term['field_namespace_type'][LANGUAGE_NONE][0] = (array) serchilo_taxonomy_ensure_term('user', 'namespace_types');
  serchilo_taxonomy_ensure_term($edit['name'], 'namespaces', $term);
}


// Options list for namespaces

/**
 * Creates an options list of namespaces of a given namespace_type.
 *
 * @param string $namespace_type
 *   The namespace type, e.g. 'language' or 'country'.
 *
 * @return array $options
 *   The generated options list.
 */
function serchilo_options_list_namespace_by_type($namespace_type) {

  $namespace_type_id = key(taxonomy_get_term_by_name($namespace_type, 'namespace_types'));

  $efq = new EntityFieldQuery;

  $result = $efq
    ->entityCondition('entity_type', 'taxonomy_term')
    ->fieldCondition('field_namespace_type', 'tid',  $namespace_type_id)
    ->propertyOrderBy('description')
    ->execute();

  $namespace_ids = array_keys(array_shift($result));
  $namespaces = taxonomy_term_load_multiple($namespace_ids);

  $options = array();
  foreach ($namespaces as $namespace) {
    $options[$namespace->tid] = $namespace->description . ' (' . $namespace->name . ')';
  }
  return $options;
}

/**
 * Custom options list callback.
 */
function serchilo_options_list_language_namespace() {
  return serchilo_options_list_namespace_by_type('language');
}

/**
 * Custom options list callback.
 */
function serchilo_options_list_country_namespace() {
  return serchilo_options_list_namespace_by_type('country');
}


// SHORTCUT HELPERS

function serchilo_get_argument_names($url, $post_parameters) {

  $argument_names = array_merge(
    serchilo_get_argument_names_from_string($post_parameters),
    serchilo_get_argument_names_from_string($url)
  );

  // treat arguments with same name as only one argument
  $argument_names = array_unique($argument_names);

  // make sure indexes have no gaps
  $argument_names = array_values($argument_names);

  return $argument_names;
}

function serchilo_get_argument_names_from_string($str) {

  preg_match_all(
    // ? makes ungreedy
    '/\{s:(.+?)\}/',
    $str,
    $matches,
    PREG_PATTERN_ORDER
  );

  return $matches[1];
}

/**
 * Check if shortcut edit is sensible edit.
 *
 * @param $node
 *   Node of type shortcut.
 * @return 
 *   TRUE if edit is sensible.
 */
function serchilo_is_sensible_edit($node)
{
  // Default is TRUE.
  $is_sensible_edit = TRUE;

  // TODO:
  // better use node_type_get_type() ?
  if ($node->type == 'shortcut') {
    if (!empty($node->nid)) {
      $is_sensible_edit = (
        (
          // change in keyword
          drupal_array_get_nested_value($node->original->field_keyword, array(LANGUAGE_NONE, 0, 'value')) 
          != drupal_array_get_nested_value($node->field_keyword, array(LANGUAGE_NONE, 0, 'value'))
        ) 
        ||
        (
          // change in url
          drupal_array_get_nested_value($node->original->field_url, array(LANGUAGE_NONE, 0, 'value')) 
          != drupal_array_get_nested_value($node->field_url, array(LANGUAGE_NONE, 0, 'value'))
        ) 
        ||
        (
          // change in namespace
          drupal_array_get_nested_value($node->original->field_namespace, array(LANGUAGE_NONE, 0, 'tid')) 
          != drupal_array_get_nested_value($node->field_namespace, array(LANGUAGE_NONE, 0, 'tid'))
        ) 
      );
    }
    else {
      // every new shortcut is sensible
      $is_sensible_edit = TRUE;
    }
  }
  return $is_sensible_edit;
}


// PHP HELPERS

function serchilo_array_value($array, $key, $default_value = null) {
  if (isset($array[$key])) {
    return $array[$key];
  }
  return $default_value;
}


// OPENSEARCH HELPERS

/**
 * Return the title for the Opensearch head link.
 *
 * @param $namespaces_path
 *    String of namespaces seperated by SERCHILO_NAMESPACE_PATH_SEPARATOR.
 * @param $default_keyword
 *    (optional) String of the default keyword.
 * @return $title
 *    String of the Opensearch head link.
 */
function serchilo_opensearch_title($namespaces_path, $default_keyword = NULL) {
  if( $default_keyword ) {
    $title =  'Serchilo: ' . $namespaces_path . ' | ' . $default_keyword;
  }
  else {
    $title =  'Serchilo: ' . $namespaces_path;
  }
  return $title;
}


// DISPATCH HELPERS

/**
 * Loads default language namespace.
 *
 * @return $language_namespace 
 *   A Taxonomy term object.
 */
function serchilo_get_default_language_namespace() {
  global $language;

  $default_language = $language->language;
  $language_namespace = current(taxonomy_get_term_by_name($default_language, 'namespaces')); 

  return $language_namespace;
}

/**
 * Loads default country namespace.
 *
 * @return $language_namespace 
 *   A Taxonomy term object.
 */
function serchilo_get_default_country_namespace() {

  $ip_address = ip_address();

  $default_country_namespace_name = @geoip_country_code3_by_name($ip_address);
  $default_country_namespace_name = strtolower($default_country_namespace_name);

  // If no country namespace found: use default.
  if (
    (!$default_country_namespace_name) ||
    (strlen($default_country_namespace_name) != 3 )
  ) {
    $default_country_namespace_name  = SERCHILO_DEFAULT_COUNTRY;
  }

  $default_country_namespace = current(taxonomy_get_term_by_name($default_country_namespace_name, 'namespaces')); 

  return $default_country_namespace;
}


// TAXONOMY HELPERS

function serchilo_taxonomy_ensure_term($term_name, $vocabulary_name, $term = array()) {

  $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  # if namespace_type does not exist yet:
  # create it
  if(empty($term_list)) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $term = array(
      'name' => $term_name,
      'vid' => (int) $vocabulary->vid,
      'format' => 'plain_text',
    ) + $term;
    $term = (object) $term;
    taxonomy_term_save($term);
    $term_list = taxonomy_get_term_by_name($term_name, $vocabulary_name );
  }
  # get first element, the only one
  $term = array_shift($term_list);
  return $term;
}

